
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002d1c  08002d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d44  08002d44  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002d44  08002d44  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d44  08002d44  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d48  08002d48  00012d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000054  08002da0  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  08002da0  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d73  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dbb  00000000  00000000  00029df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  0002c728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170b3  00000000  00000000  0002d170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd57  00000000  00000000  00044223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827e4  00000000  00000000  00050f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d375e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c08  00000000  00000000  000d37b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d04 	.word	0x08002d04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08002d04 	.word	0x08002d04

0800014c <isButton1Pressed>:
int KeyReg2 = NORMAL_STATE;
int KeyReg3 = NORMAL_STATE;		//trang thai on dinh trc do
int TimerForKeyPress = 200;		//thoi gian nhan de la 2s

int button1_flag = 0;
int isButton1Pressed() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag == 1) {
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000070 	.word	0x20000070

08000170 <subKeyProcess>:

void subKeyProcess() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//TODO
	//HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
	button1_flag = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <subKeyProcess+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20000070 	.word	0x20000070

08000188 <isButton2Pressed>:
int keyReg3_btn2 = NORMAL_STATE;

int timeForKeyPressed_btn2 = 200;

int button2_flag = 0;
int isButton2Pressed() {
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0
	if (button2_flag == 1) {
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <isButton2Pressed+0x20>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d104      	bne.n	800019e <isButton2Pressed+0x16>
		button2_flag = 0;
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <isButton2Pressed+0x20>)
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
		return 1;
 800019a:	2301      	movs	r3, #1
 800019c:	e000      	b.n	80001a0 <isButton2Pressed+0x18>
	}
	return 0;
 800019e:	2300      	movs	r3, #0
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000074 	.word	0x20000074

080001ac <subKeyProcess_btn2>:

void subKeyProcess_btn2() {
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
	button2_flag = 1;
 80001b0:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <subKeyProcess_btn2+0x14>)
 80001b2:	2201      	movs	r2, #1
 80001b4:	601a      	str	r2, [r3, #0]
}
 80001b6:	bf00      	nop
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	20000074 	.word	0x20000074

080001c4 <isButton3Pressed>:
int keyReg3_btn3 = NORMAL_STATE;

int timeForKeyPressed_btn3 = 200;

int button3_flag = 0;
int isButton3Pressed() {
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	if (button3_flag == 1) {
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <isButton3Pressed+0x20>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d104      	bne.n	80001da <isButton3Pressed+0x16>
		button3_flag = 0;
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <isButton3Pressed+0x20>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
		return 1;
 80001d6:	2301      	movs	r3, #1
 80001d8:	e000      	b.n	80001dc <isButton3Pressed+0x18>
	}
	return 0;
 80001da:	2300      	movs	r3, #0
}
 80001dc:	4618      	mov	r0, r3
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	20000078 	.word	0x20000078

080001e8 <subKeyProcess_btn3>:

void subKeyProcess_btn3() {
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button3_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess_btn3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000078 	.word	0x20000078

08000200 <getKeyInput>:


void getKeyInput() //xu ly chong rung va nhan de cho phim	|	duoc goi trong softwareTimer moi 10ms 1 lan, tuc la sau moi 10ms ta moi xy ly chong rung va nhan de cho phim
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
//====================BUTTON 1===================================
	KeyReg0 = KeyReg1;
 8000204:	4b5c      	ldr	r3, [pc, #368]	; (8000378 <getKeyInput+0x178>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a5c      	ldr	r2, [pc, #368]	; (800037c <getKeyInput+0x17c>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 800020c:	4b5c      	ldr	r3, [pc, #368]	; (8000380 <getKeyInput+0x180>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a59      	ldr	r2, [pc, #356]	; (8000378 <getKeyInput+0x178>)
 8000212:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	485a      	ldr	r0, [pc, #360]	; (8000384 <getKeyInput+0x184>)
 800021a:	f001 fd47 	bl	8001cac <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b57      	ldr	r3, [pc, #348]	; (8000380 <getKeyInput+0x180>)
 8000224:	601a      	str	r2, [r3, #0]

	if ((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)) {
 8000226:	4b55      	ldr	r3, [pc, #340]	; (800037c <getKeyInput+0x17c>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b53      	ldr	r3, [pc, #332]	; (8000378 <getKeyInput+0x178>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d125      	bne.n	800027e <getKeyInput+0x7e>
 8000232:	4b51      	ldr	r3, [pc, #324]	; (8000378 <getKeyInput+0x178>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b52      	ldr	r3, [pc, #328]	; (8000380 <getKeyInput+0x180>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d11f      	bne.n	800027e <getKeyInput+0x7e>
		if (KeyReg3 != KeyReg2) // nhan tha
 800023e:	4b52      	ldr	r3, [pc, #328]	; (8000388 <getKeyInput+0x188>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b4f      	ldr	r3, [pc, #316]	; (8000380 <getKeyInput+0x180>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00d      	beq.n	8000266 <getKeyInput+0x66>
		{
			KeyReg3 = KeyReg2;	//cap nhat lai trang thai cua nut
 800024a:	4b4d      	ldr	r3, [pc, #308]	; (8000380 <getKeyInput+0x180>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a4e      	ldr	r2, [pc, #312]	; (8000388 <getKeyInput+0x188>)
 8000250:	6013      	str	r3, [r2, #0]

			if (KeyReg2 == PRESSED_STATE) // nut dang dc nhan
 8000252:	4b4b      	ldr	r3, [pc, #300]	; (8000380 <getKeyInput+0x180>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d111      	bne.n	800027e <getKeyInput+0x7e>
			{
				//TODO
				subKeyProcess();
 800025a:	f7ff ff89 	bl	8000170 <subKeyProcess>
				TimerForKeyPress = 200;
 800025e:	4b4b      	ldr	r3, [pc, #300]	; (800038c <getKeyInput+0x18c>)
 8000260:	22c8      	movs	r2, #200	; 0xc8
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	e00b      	b.n	800027e <getKeyInput+0x7e>
			}
		}
		else //nhan de
		{
			TimerForKeyPress--;
 8000266:	4b49      	ldr	r3, [pc, #292]	; (800038c <getKeyInput+0x18c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a47      	ldr	r2, [pc, #284]	; (800038c <getKeyInput+0x18c>)
 800026e:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress == 0) // het thoi gian nhan de
 8000270:	4b46      	ldr	r3, [pc, #280]	; (800038c <getKeyInput+0x18c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d102      	bne.n	800027e <getKeyInput+0x7e>
//					subKeyProcess();
//				}
//
//				TimerForKeyPress = 200;

				KeyReg3 = NORMAL_STATE;
 8000278:	4b43      	ldr	r3, [pc, #268]	; (8000388 <getKeyInput+0x188>)
 800027a:	2201      	movs	r2, #1
 800027c:	601a      	str	r2, [r3, #0]
		}
	}
//====================BUTTON 1===================================

//====================BUTTON 2===================================
	keyReg0_btn2 = keyReg1_btn2;
 800027e:	4b44      	ldr	r3, [pc, #272]	; (8000390 <getKeyInput+0x190>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a44      	ldr	r2, [pc, #272]	; (8000394 <getKeyInput+0x194>)
 8000284:	6013      	str	r3, [r2, #0]
	keyReg1_btn2 = keyReg2_btn2;
 8000286:	4b44      	ldr	r3, [pc, #272]	; (8000398 <getKeyInput+0x198>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a41      	ldr	r2, [pc, #260]	; (8000390 <getKeyInput+0x190>)
 800028c:	6013      	str	r3, [r2, #0]
	keyReg2_btn2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800028e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000292:	483c      	ldr	r0, [pc, #240]	; (8000384 <getKeyInput+0x184>)
 8000294:	f001 fd0a 	bl	8001cac <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	4b3e      	ldr	r3, [pc, #248]	; (8000398 <getKeyInput+0x198>)
 800029e:	601a      	str	r2, [r3, #0]

	if ((keyReg0_btn2 == keyReg1_btn2) && (keyReg1_btn2 == keyReg2_btn2)) {
 80002a0:	4b3c      	ldr	r3, [pc, #240]	; (8000394 <getKeyInput+0x194>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b3a      	ldr	r3, [pc, #232]	; (8000390 <getKeyInput+0x190>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d125      	bne.n	80002f8 <getKeyInput+0xf8>
 80002ac:	4b38      	ldr	r3, [pc, #224]	; (8000390 <getKeyInput+0x190>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4b39      	ldr	r3, [pc, #228]	; (8000398 <getKeyInput+0x198>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d11f      	bne.n	80002f8 <getKeyInput+0xf8>
		if (keyReg3_btn2 != keyReg2_btn2) {
 80002b8:	4b38      	ldr	r3, [pc, #224]	; (800039c <getKeyInput+0x19c>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	4b36      	ldr	r3, [pc, #216]	; (8000398 <getKeyInput+0x198>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d00d      	beq.n	80002e0 <getKeyInput+0xe0>
			keyReg3_btn2 = keyReg2_btn2;
 80002c4:	4b34      	ldr	r3, [pc, #208]	; (8000398 <getKeyInput+0x198>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a34      	ldr	r2, [pc, #208]	; (800039c <getKeyInput+0x19c>)
 80002ca:	6013      	str	r3, [r2, #0]

			if (keyReg2_btn2 == PRESSED_STATE) {
 80002cc:	4b32      	ldr	r3, [pc, #200]	; (8000398 <getKeyInput+0x198>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d111      	bne.n	80002f8 <getKeyInput+0xf8>
				subKeyProcess_btn2();
 80002d4:	f7ff ff6a 	bl	80001ac <subKeyProcess_btn2>
				timeForKeyPressed_btn2 = 200;
 80002d8:	4b31      	ldr	r3, [pc, #196]	; (80003a0 <getKeyInput+0x1a0>)
 80002da:	22c8      	movs	r2, #200	; 0xc8
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	e00b      	b.n	80002f8 <getKeyInput+0xf8>
			}
		}
		else {
			timeForKeyPressed_btn2--;
 80002e0:	4b2f      	ldr	r3, [pc, #188]	; (80003a0 <getKeyInput+0x1a0>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	4a2e      	ldr	r2, [pc, #184]	; (80003a0 <getKeyInput+0x1a0>)
 80002e8:	6013      	str	r3, [r2, #0]
			if (timeForKeyPressed_btn2 == 0) {
 80002ea:	4b2d      	ldr	r3, [pc, #180]	; (80003a0 <getKeyInput+0x1a0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d102      	bne.n	80002f8 <getKeyInput+0xf8>
				keyReg3_btn2 = NORMAL_STATE;
 80002f2:	4b2a      	ldr	r3, [pc, #168]	; (800039c <getKeyInput+0x19c>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	601a      	str	r2, [r3, #0]
		}
	}
//====================BUTTON 2===================================

//====================BUTTON 3===================================
	keyReg0_btn3 = keyReg1_btn3;
 80002f8:	4b2a      	ldr	r3, [pc, #168]	; (80003a4 <getKeyInput+0x1a4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a2a      	ldr	r2, [pc, #168]	; (80003a8 <getKeyInput+0x1a8>)
 80002fe:	6013      	str	r3, [r2, #0]
	keyReg1_btn3 = keyReg2_btn3;
 8000300:	4b2a      	ldr	r3, [pc, #168]	; (80003ac <getKeyInput+0x1ac>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a27      	ldr	r2, [pc, #156]	; (80003a4 <getKeyInput+0x1a4>)
 8000306:	6013      	str	r3, [r2, #0]
	keyReg2_btn3 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000308:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800030c:	481d      	ldr	r0, [pc, #116]	; (8000384 <getKeyInput+0x184>)
 800030e:	f001 fccd 	bl	8001cac <HAL_GPIO_ReadPin>
 8000312:	4603      	mov	r3, r0
 8000314:	461a      	mov	r2, r3
 8000316:	4b25      	ldr	r3, [pc, #148]	; (80003ac <getKeyInput+0x1ac>)
 8000318:	601a      	str	r2, [r3, #0]

	if ((keyReg0_btn3 == keyReg1_btn3) && (keyReg1_btn3 == keyReg2_btn3)) {
 800031a:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <getKeyInput+0x1a8>)
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <getKeyInput+0x1a4>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	429a      	cmp	r2, r3
 8000324:	d125      	bne.n	8000372 <getKeyInput+0x172>
 8000326:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <getKeyInput+0x1a4>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4b20      	ldr	r3, [pc, #128]	; (80003ac <getKeyInput+0x1ac>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	429a      	cmp	r2, r3
 8000330:	d11f      	bne.n	8000372 <getKeyInput+0x172>
		if (keyReg3_btn3 != keyReg2_btn3) {		//nhan nha
 8000332:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <getKeyInput+0x1b0>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <getKeyInput+0x1ac>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	429a      	cmp	r2, r3
 800033c:	d00d      	beq.n	800035a <getKeyInput+0x15a>
			keyReg3_btn3 = keyReg2_btn3;
 800033e:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <getKeyInput+0x1ac>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a1b      	ldr	r2, [pc, #108]	; (80003b0 <getKeyInput+0x1b0>)
 8000344:	6013      	str	r3, [r2, #0]

			if (keyReg2_btn3 == PRESSED_STATE) {
 8000346:	4b19      	ldr	r3, [pc, #100]	; (80003ac <getKeyInput+0x1ac>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d111      	bne.n	8000372 <getKeyInput+0x172>
				timeForKeyPressed_btn3 = 200;
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <getKeyInput+0x1b4>)
 8000350:	22c8      	movs	r2, #200	; 0xc8
 8000352:	601a      	str	r2, [r3, #0]
				subKeyProcess_btn3();
 8000354:	f7ff ff48 	bl	80001e8 <subKeyProcess_btn3>
				keyReg3_btn3 = NORMAL_STATE;
			}
		}
	}
//====================BUTTON 3===================================
}
 8000358:	e00b      	b.n	8000372 <getKeyInput+0x172>
			timeForKeyPressed_btn3--;
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <getKeyInput+0x1b4>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	3b01      	subs	r3, #1
 8000360:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <getKeyInput+0x1b4>)
 8000362:	6013      	str	r3, [r2, #0]
			if (timeForKeyPressed_btn3 == 0) {
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <getKeyInput+0x1b4>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d102      	bne.n	8000372 <getKeyInput+0x172>
				keyReg3_btn3 = NORMAL_STATE;
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <getKeyInput+0x1b0>)
 800036e:	2201      	movs	r2, #1
 8000370:	601a      	str	r2, [r3, #0]
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000004 	.word	0x20000004
 800037c:	20000000 	.word	0x20000000
 8000380:	20000008 	.word	0x20000008
 8000384:	40010800 	.word	0x40010800
 8000388:	2000000c 	.word	0x2000000c
 800038c:	20000010 	.word	0x20000010
 8000390:	20000018 	.word	0x20000018
 8000394:	20000014 	.word	0x20000014
 8000398:	2000001c 	.word	0x2000001c
 800039c:	20000020 	.word	0x20000020
 80003a0:	20000024 	.word	0x20000024
 80003a4:	2000002c 	.word	0x2000002c
 80003a8:	20000028 	.word	0x20000028
 80003ac:	20000030 	.word	0x20000030
 80003b0:	20000034 	.word	0x20000034
 80003b4:	20000038 	.word	0x20000038

080003b8 <oneSecondTask>:

#include "fsm_automatic.h"

void (*nextTask_Switch_State)() = NULL;
void oneSecondTask()
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	if (manual == 0) {
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <oneSecondTask+0x44>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d111      	bne.n	80003e8 <oneSecondTask+0x30>
		if (vertical_counter > 0) {
 80003c4:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <oneSecondTask+0x48>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	dd04      	ble.n	80003d6 <oneSecondTask+0x1e>
			vertical_counter--;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <oneSecondTask+0x48>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3b01      	subs	r3, #1
 80003d2:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <oneSecondTask+0x48>)
 80003d4:	6013      	str	r3, [r2, #0]
		}

		if (horizontal_counter > 0) {
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <oneSecondTask+0x4c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	dd04      	ble.n	80003e8 <oneSecondTask+0x30>
			horizontal_counter--;
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <oneSecondTask+0x4c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <oneSecondTask+0x4c>)
 80003e6:	6013      	str	r3, [r2, #0]
		}
	}

	updateClockBuffer(vertical_counter, horizontal_counter);
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <oneSecondTask+0x48>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a05      	ldr	r2, [pc, #20]	; (8000404 <oneSecondTask+0x4c>)
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4611      	mov	r1, r2
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 f8a4 	bl	8001540 <updateClockBuffer>
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000080 	.word	0x20000080
 8000400:	2000008c 	.word	0x2000008c
 8000404:	20000090 	.word	0x20000090

08000408 <scan7SegLedTask>:

void scan7SegLedTask()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	if (ledIndex >= MAX_LED) {
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <scan7SegLedTask+0x2c>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <scan7SegLedTask+0x30>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	429a      	cmp	r2, r3
 8000416:	db02      	blt.n	800041e <scan7SegLedTask+0x16>
		ledIndex = 0;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <scan7SegLedTask+0x2c>)
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
	}
	update7seg(ledIndex++);
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <scan7SegLedTask+0x2c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	1c5a      	adds	r2, r3, #1
 8000424:	4903      	ldr	r1, [pc, #12]	; (8000434 <scan7SegLedTask+0x2c>)
 8000426:	600a      	str	r2, [r1, #0]
 8000428:	4618      	mov	r0, r3
 800042a:	f001 f8c5 	bl	80015b8 <update7seg>
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200000a8 	.word	0x200000a8
 8000438:	08002d2c 	.word	0x08002d2c

0800043c <redGreenTask>:

	SCH_Add_Task(redGreenTask, 100, 0);
}

void redGreenTask()
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	status = RED_GREEN_AUTO;
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <redGreenTask+0x4c>)
 8000442:	2202      	movs	r2, #2
 8000444:	601a      	str	r2, [r3, #0]

	turnOnRedGreen();
 8000446:	f000 ffa3 	bl	8001390 <turnOnRedGreen>

	vertical_counter = redCounter;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <redGreenTask+0x50>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a10      	ldr	r2, [pc, #64]	; (8000490 <redGreenTask+0x54>)
 8000450:	6013      	str	r3, [r2, #0]
	horizontal_counter = greenCounter;
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <redGreenTask+0x58>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a10      	ldr	r2, [pc, #64]	; (8000498 <redGreenTask+0x5c>)
 8000458:	6013      	str	r3, [r2, #0]
	updateClockBuffer(vertical_counter, horizontal_counter);
 800045a:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <redGreenTask+0x54>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <redGreenTask+0x5c>)
 8000460:	6812      	ldr	r2, [r2, #0]
 8000462:	4611      	mov	r1, r2
 8000464:	4618      	mov	r0, r3
 8000466:	f001 f86b 	bl	8001540 <updateClockBuffer>

	SCH_Add_Task(redYellowTask, greenCounter * 100, 0);
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <redGreenTask+0x58>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2264      	movs	r2, #100	; 0x64
 8000470:	fb02 f303 	mul.w	r3, r2, r3
 8000474:	2200      	movs	r2, #0
 8000476:	4619      	mov	r1, r3
 8000478:	4808      	ldr	r0, [pc, #32]	; (800049c <redGreenTask+0x60>)
 800047a:	f000 fd35 	bl	8000ee8 <SCH_Add_Task>
	nextTask_Switch_State = redYellowTask;
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <redGreenTask+0x64>)
 8000480:	4a06      	ldr	r2, [pc, #24]	; (800049c <redGreenTask+0x60>)
 8000482:	601a      	str	r2, [r3, #0]
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000084 	.word	0x20000084
 800048c:	20000040 	.word	0x20000040
 8000490:	2000008c 	.word	0x2000008c
 8000494:	20000048 	.word	0x20000048
 8000498:	20000090 	.word	0x20000090
 800049c:	080004a5 	.word	0x080004a5
 80004a0:	2000007c 	.word	0x2000007c

080004a4 <redYellowTask>:

void redYellowTask()
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	status = RED_YELLOW_AUTO;
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <redYellowTask+0x4c>)
 80004aa:	2203      	movs	r2, #3
 80004ac:	601a      	str	r2, [r3, #0]

	turnOnRedYellow();
 80004ae:	f000 ff85 	bl	80013bc <turnOnRedYellow>

	vertical_counter = yellowCounter;
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <redYellowTask+0x50>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a10      	ldr	r2, [pc, #64]	; (80004f8 <redYellowTask+0x54>)
 80004b8:	6013      	str	r3, [r2, #0]
	horizontal_counter = yellowCounter;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <redYellowTask+0x50>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a0f      	ldr	r2, [pc, #60]	; (80004fc <redYellowTask+0x58>)
 80004c0:	6013      	str	r3, [r2, #0]
	updateClockBuffer(vertical_counter, horizontal_counter);
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <redYellowTask+0x54>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a0d      	ldr	r2, [pc, #52]	; (80004fc <redYellowTask+0x58>)
 80004c8:	6812      	ldr	r2, [r2, #0]
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 f837 	bl	8001540 <updateClockBuffer>

	SCH_Add_Task(greenRedTask, yellowCounter * 100, 0);
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <redYellowTask+0x50>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2264      	movs	r2, #100	; 0x64
 80004d8:	fb02 f303 	mul.w	r3, r2, r3
 80004dc:	2200      	movs	r2, #0
 80004de:	4619      	mov	r1, r3
 80004e0:	4807      	ldr	r0, [pc, #28]	; (8000500 <redYellowTask+0x5c>)
 80004e2:	f000 fd01 	bl	8000ee8 <SCH_Add_Task>
	nextTask_Switch_State = greenRedTask;
 80004e6:	4b07      	ldr	r3, [pc, #28]	; (8000504 <redYellowTask+0x60>)
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <redYellowTask+0x5c>)
 80004ea:	601a      	str	r2, [r3, #0]
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000084 	.word	0x20000084
 80004f4:	20000044 	.word	0x20000044
 80004f8:	2000008c 	.word	0x2000008c
 80004fc:	20000090 	.word	0x20000090
 8000500:	08000509 	.word	0x08000509
 8000504:	2000007c 	.word	0x2000007c

08000508 <greenRedTask>:

void greenRedTask()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	status = GREEN_RED_AUTO;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <greenRedTask+0x4c>)
 800050e:	2204      	movs	r2, #4
 8000510:	601a      	str	r2, [r3, #0]

	turnOnGreenRed();
 8000512:	f000 ff69 	bl	80013e8 <turnOnGreenRed>

	vertical_counter = greenCounter;
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <greenRedTask+0x50>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a10      	ldr	r2, [pc, #64]	; (800055c <greenRedTask+0x54>)
 800051c:	6013      	str	r3, [r2, #0]
	horizontal_counter = redCounter;
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <greenRedTask+0x58>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a10      	ldr	r2, [pc, #64]	; (8000564 <greenRedTask+0x5c>)
 8000524:	6013      	str	r3, [r2, #0]
	updateClockBuffer(vertical_counter, horizontal_counter);
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <greenRedTask+0x54>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <greenRedTask+0x5c>)
 800052c:	6812      	ldr	r2, [r2, #0]
 800052e:	4611      	mov	r1, r2
 8000530:	4618      	mov	r0, r3
 8000532:	f001 f805 	bl	8001540 <updateClockBuffer>

	SCH_Add_Task(yellowRedTask, greenCounter * 100, 0);
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <greenRedTask+0x50>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2264      	movs	r2, #100	; 0x64
 800053c:	fb02 f303 	mul.w	r3, r2, r3
 8000540:	2200      	movs	r2, #0
 8000542:	4619      	mov	r1, r3
 8000544:	4808      	ldr	r0, [pc, #32]	; (8000568 <greenRedTask+0x60>)
 8000546:	f000 fccf 	bl	8000ee8 <SCH_Add_Task>
	nextTask_Switch_State = yellowRedTask;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <greenRedTask+0x64>)
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <greenRedTask+0x60>)
 800054e:	601a      	str	r2, [r3, #0]
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000084 	.word	0x20000084
 8000558:	20000048 	.word	0x20000048
 800055c:	2000008c 	.word	0x2000008c
 8000560:	20000040 	.word	0x20000040
 8000564:	20000090 	.word	0x20000090
 8000568:	08000571 	.word	0x08000571
 800056c:	2000007c 	.word	0x2000007c

08000570 <yellowRedTask>:
void yellowRedTask()
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	status = YELLOW_RED_AUTO;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <yellowRedTask+0x4c>)
 8000576:	2205      	movs	r2, #5
 8000578:	601a      	str	r2, [r3, #0]

	turnOnYellowRed();
 800057a:	f000 ff4b 	bl	8001414 <turnOnYellowRed>

	vertical_counter = yellowCounter;
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <yellowRedTask+0x50>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <yellowRedTask+0x54>)
 8000584:	6013      	str	r3, [r2, #0]
	horizontal_counter = yellowCounter;
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <yellowRedTask+0x50>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <yellowRedTask+0x58>)
 800058c:	6013      	str	r3, [r2, #0]
	updateClockBuffer(vertical_counter, horizontal_counter);
 800058e:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <yellowRedTask+0x54>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <yellowRedTask+0x58>)
 8000594:	6812      	ldr	r2, [r2, #0]
 8000596:	4611      	mov	r1, r2
 8000598:	4618      	mov	r0, r3
 800059a:	f000 ffd1 	bl	8001540 <updateClockBuffer>

	SCH_Add_Task(redGreenTask, yellowCounter * 100, 0);
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <yellowRedTask+0x50>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2264      	movs	r2, #100	; 0x64
 80005a4:	fb02 f303 	mul.w	r3, r2, r3
 80005a8:	2200      	movs	r2, #0
 80005aa:	4619      	mov	r1, r3
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <yellowRedTask+0x5c>)
 80005ae:	f000 fc9b 	bl	8000ee8 <SCH_Add_Task>
	nextTask_Switch_State = redGreenTask;
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <yellowRedTask+0x60>)
 80005b4:	4a05      	ldr	r2, [pc, #20]	; (80005cc <yellowRedTask+0x5c>)
 80005b6:	601a      	str	r2, [r3, #0]
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000084 	.word	0x20000084
 80005c0:	20000044 	.word	0x20000044
 80005c4:	2000008c 	.word	0x2000008c
 80005c8:	20000090 	.word	0x20000090
 80005cc:	0800043d 	.word	0x0800043d
 80005d0:	2000007c 	.word	0x2000007c

080005d4 <fsm_automatic_run>:

void fsm_automatic_run()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	switch (status) {
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <fsm_automatic_run+0x70>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	2b04      	cmp	r3, #4
 80005e0:	d82e      	bhi.n	8000640 <fsm_automatic_run+0x6c>
 80005e2:	a201      	add	r2, pc, #4	; (adr r2, 80005e8 <fsm_automatic_run+0x14>)
 80005e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e8:	080005fd 	.word	0x080005fd
 80005ec:	08000613 	.word	0x08000613
 80005f0:	08000613 	.word	0x08000613
 80005f4:	08000613 	.word	0x08000613
 80005f8:	08000613 	.word	0x08000613
	case START:
		//TODO
		initial();
 80005fc:	f000 feba 	bl	8001374 <initial>
		manual = 0;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <fsm_automatic_run+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]

		SCH_Add_Task(redGreenTask, 100, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2164      	movs	r1, #100	; 0x64
 800060a:	4810      	ldr	r0, [pc, #64]	; (800064c <fsm_automatic_run+0x78>)
 800060c:	f000 fc6c 	bl	8000ee8 <SCH_Add_Task>
//			turnOffAllLeds();
//			newRedCounter = redCounter;
//			newYellowCounter = yellowCounter;
//			newGreenCounter = greenCounter;
//		}
		break;
 8000610:	e000      	b.n	8000614 <fsm_automatic_run+0x40>
//			newRedCounter = redCounter;
//			newYellowCounter = yellowCounter;
//			newGreenCounter = greenCounter;
//		}

		break;
 8000612:	bf00      	nop
		break;
	default:
		return;
	}

	if (isButton1Pressed()) {
 8000614:	f7ff fd9a 	bl	800014c <isButton1Pressed>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d011      	beq.n	8000642 <fsm_automatic_run+0x6e>
		status = START_MANUAL;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <fsm_automatic_run+0x70>)
 8000620:	220b      	movs	r2, #11
 8000622:	601a      	str	r2, [r3, #0]
		turnOffAllLeds();
 8000624:	f000 fe9a 	bl	800135c <turnOffAllLeds>

		//SCH_Delete_Task_By_Function(fsm_automatic_run);
		SCH_Delete_Task_By_Function(nextTask_Switch_State);
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <fsm_automatic_run+0x7c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fded 	bl	800120c <SCH_Delete_Task_By_Function>

		SCH_Add_Task(fsm_manual_run, 0, 1000);
 8000632:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000636:	2100      	movs	r1, #0
 8000638:	4806      	ldr	r0, [pc, #24]	; (8000654 <fsm_automatic_run+0x80>)
 800063a:	f000 fc55 	bl	8000ee8 <SCH_Add_Task>
 800063e:	e000      	b.n	8000642 <fsm_automatic_run+0x6e>
		return;
 8000640:	bf00      	nop
	}

}
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000084 	.word	0x20000084
 8000648:	20000080 	.word	0x20000080
 800064c:	0800043d 	.word	0x0800043d
 8000650:	2000007c 	.word	0x2000007c
 8000654:	08000659 	.word	0x08000659

08000658 <fsm_manual_run>:
{
	toggleAllLeds();
	manual = 1;
}

void fsm_manual_run(){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	switch(status) {
 800065c:	4b89      	ldr	r3, [pc, #548]	; (8000884 <fsm_manual_run+0x22c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3b0b      	subs	r3, #11
 8000662:	2b03      	cmp	r3, #3
 8000664:	f200 8103 	bhi.w	800086e <fsm_manual_run+0x216>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <fsm_manual_run+0x18>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	08000681 	.word	0x08000681
 8000674:	080006d1 	.word	0x080006d1
 8000678:	08000757 	.word	0x08000757
 800067c:	080007df 	.word	0x080007df
	case START_MANUAL:
		//TODO:
		toggleAllLeds();
 8000680:	f000 fede 	bl	8001440 <toggleAllLeds>
		manual = 1;
 8000684:	4b80      	ldr	r3, [pc, #512]	; (8000888 <fsm_manual_run+0x230>)
 8000686:	2201      	movs	r2, #1
 8000688:	601a      	str	r2, [r3, #0]

		//SET UP FOR THE NEXT STATE
		if (isButton1Pressed()) {
 800068a:	f7ff fd5f 	bl	800014c <isButton1Pressed>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d013      	beq.n	80006bc <fsm_manual_run+0x64>
			status = RED_MANUAL;
 8000694:	4b7b      	ldr	r3, [pc, #492]	; (8000884 <fsm_manual_run+0x22c>)
 8000696:	220c      	movs	r2, #12
 8000698:	601a      	str	r2, [r3, #0]
			turnOffAllLeds();
 800069a:	f000 fe5f 	bl	800135c <turnOffAllLeds>

			horizontal_counter = 2;
 800069e:	4b7b      	ldr	r3, [pc, #492]	; (800088c <fsm_manual_run+0x234>)
 80006a0:	2202      	movs	r2, #2
 80006a2:	601a      	str	r2, [r3, #0]
			vertical_counter = newRedCounter;
 80006a4:	4b7a      	ldr	r3, [pc, #488]	; (8000890 <fsm_manual_run+0x238>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a7a      	ldr	r2, [pc, #488]	; (8000894 <fsm_manual_run+0x23c>)
 80006aa:	6013      	str	r3, [r2, #0]
			updateClockBuffer(vertical_counter, horizontal_counter);
 80006ac:	4b79      	ldr	r3, [pc, #484]	; (8000894 <fsm_manual_run+0x23c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a76      	ldr	r2, [pc, #472]	; (800088c <fsm_manual_run+0x234>)
 80006b2:	6812      	ldr	r2, [r2, #0]
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 ff42 	bl	8001540 <updateClockBuffer>
		}

		if (isButton3Pressed()) {
 80006bc:	f7ff fd82 	bl	80001c4 <isButton3Pressed>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	f000 80d5 	beq.w	8000872 <fsm_manual_run+0x21a>
			status = START;
 80006c8:	4b6e      	ldr	r3, [pc, #440]	; (8000884 <fsm_manual_run+0x22c>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
		}
		break;
 80006ce:	e0d0      	b.n	8000872 <fsm_manual_run+0x21a>
	case RED_MANUAL:
		//TODO:
		toggleRed();
 80006d0:	f000 fed6 	bl	8001480 <toggleRed>

		//SET UP FOR THE NEXT STATE
		if (isButton1Pressed()) {
 80006d4:	f7ff fd3a 	bl	800014c <isButton1Pressed>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d013      	beq.n	8000706 <fsm_manual_run+0xae>
			status = YELLOW_MANUAL;
 80006de:	4b69      	ldr	r3, [pc, #420]	; (8000884 <fsm_manual_run+0x22c>)
 80006e0:	220d      	movs	r2, #13
 80006e2:	601a      	str	r2, [r3, #0]
			turnOffAllLeds();
 80006e4:	f000 fe3a 	bl	800135c <turnOffAllLeds>

			horizontal_counter = 3;
 80006e8:	4b68      	ldr	r3, [pc, #416]	; (800088c <fsm_manual_run+0x234>)
 80006ea:	2203      	movs	r2, #3
 80006ec:	601a      	str	r2, [r3, #0]
			vertical_counter = newYellowCounter;
 80006ee:	4b6a      	ldr	r3, [pc, #424]	; (8000898 <fsm_manual_run+0x240>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a68      	ldr	r2, [pc, #416]	; (8000894 <fsm_manual_run+0x23c>)
 80006f4:	6013      	str	r3, [r2, #0]
			updateClockBuffer(vertical_counter, horizontal_counter);
 80006f6:	4b67      	ldr	r3, [pc, #412]	; (8000894 <fsm_manual_run+0x23c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a64      	ldr	r2, [pc, #400]	; (800088c <fsm_manual_run+0x234>)
 80006fc:	6812      	ldr	r2, [r2, #0]
 80006fe:	4611      	mov	r1, r2
 8000700:	4618      	mov	r0, r3
 8000702:	f000 ff1d 	bl	8001540 <updateClockBuffer>
		}

		if (isButton2Pressed()) {
 8000706:	f7ff fd3f 	bl	8000188 <isButton2Pressed>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d018      	beq.n	8000742 <fsm_manual_run+0xea>
			newRedCounter++;
 8000710:	4b5f      	ldr	r3, [pc, #380]	; (8000890 <fsm_manual_run+0x238>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	4a5e      	ldr	r2, [pc, #376]	; (8000890 <fsm_manual_run+0x238>)
 8000718:	6013      	str	r3, [r2, #0]
			if (newRedCounter >= 99) {
 800071a:	4b5d      	ldr	r3, [pc, #372]	; (8000890 <fsm_manual_run+0x238>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b62      	cmp	r3, #98	; 0x62
 8000720:	dd03      	ble.n	800072a <fsm_manual_run+0xd2>
				newRedCounter = redCounter;
 8000722:	4b5e      	ldr	r3, [pc, #376]	; (800089c <fsm_manual_run+0x244>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a5a      	ldr	r2, [pc, #360]	; (8000890 <fsm_manual_run+0x238>)
 8000728:	6013      	str	r3, [r2, #0]
			}
			vertical_counter = newRedCounter;
 800072a:	4b59      	ldr	r3, [pc, #356]	; (8000890 <fsm_manual_run+0x238>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a59      	ldr	r2, [pc, #356]	; (8000894 <fsm_manual_run+0x23c>)
 8000730:	6013      	str	r3, [r2, #0]
			updateClockBuffer(vertical_counter, horizontal_counter);
 8000732:	4b58      	ldr	r3, [pc, #352]	; (8000894 <fsm_manual_run+0x23c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a55      	ldr	r2, [pc, #340]	; (800088c <fsm_manual_run+0x234>)
 8000738:	6812      	ldr	r2, [r2, #0]
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f000 feff 	bl	8001540 <updateClockBuffer>
		}

		if (isButton3Pressed()) {
 8000742:	f7ff fd3f 	bl	80001c4 <isButton3Pressed>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	f000 8094 	beq.w	8000876 <fsm_manual_run+0x21e>
			status = START;
 800074e:	4b4d      	ldr	r3, [pc, #308]	; (8000884 <fsm_manual_run+0x22c>)
 8000750:	2201      	movs	r2, #1
 8000752:	601a      	str	r2, [r3, #0]
		}
		break;
 8000754:	e08f      	b.n	8000876 <fsm_manual_run+0x21e>
	case YELLOW_MANUAL:
		//TODO:
		toggleYellow();
 8000756:	f000 feb3 	bl	80014c0 <toggleYellow>

		//SET UP FOR THE NEXT STATE
		if (isButton1Pressed()) {
 800075a:	f7ff fcf7 	bl	800014c <isButton1Pressed>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d013      	beq.n	800078c <fsm_manual_run+0x134>
			status = GREEN_MANUAL;
 8000764:	4b47      	ldr	r3, [pc, #284]	; (8000884 <fsm_manual_run+0x22c>)
 8000766:	220e      	movs	r2, #14
 8000768:	601a      	str	r2, [r3, #0]
			turnOffAllLeds();
 800076a:	f000 fdf7 	bl	800135c <turnOffAllLeds>

			horizontal_counter = 4;
 800076e:	4b47      	ldr	r3, [pc, #284]	; (800088c <fsm_manual_run+0x234>)
 8000770:	2204      	movs	r2, #4
 8000772:	601a      	str	r2, [r3, #0]
			vertical_counter = newGreenCounter;
 8000774:	4b4a      	ldr	r3, [pc, #296]	; (80008a0 <fsm_manual_run+0x248>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a46      	ldr	r2, [pc, #280]	; (8000894 <fsm_manual_run+0x23c>)
 800077a:	6013      	str	r3, [r2, #0]
			updateClockBuffer(vertical_counter, horizontal_counter);
 800077c:	4b45      	ldr	r3, [pc, #276]	; (8000894 <fsm_manual_run+0x23c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a42      	ldr	r2, [pc, #264]	; (800088c <fsm_manual_run+0x234>)
 8000782:	6812      	ldr	r2, [r2, #0]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f000 feda 	bl	8001540 <updateClockBuffer>
		}

		if (isButton2Pressed()) {
 800078c:	f7ff fcfc 	bl	8000188 <isButton2Pressed>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d01a      	beq.n	80007cc <fsm_manual_run+0x174>
			newYellowCounter++;
 8000796:	4b40      	ldr	r3, [pc, #256]	; (8000898 <fsm_manual_run+0x240>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	4a3e      	ldr	r2, [pc, #248]	; (8000898 <fsm_manual_run+0x240>)
 800079e:	6013      	str	r3, [r2, #0]
			if (newYellowCounter >= newRedCounter) {
 80007a0:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <fsm_manual_run+0x240>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	4b3a      	ldr	r3, [pc, #232]	; (8000890 <fsm_manual_run+0x238>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	db03      	blt.n	80007b4 <fsm_manual_run+0x15c>
				newYellowCounter = yellowCounter;
 80007ac:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <fsm_manual_run+0x24c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a39      	ldr	r2, [pc, #228]	; (8000898 <fsm_manual_run+0x240>)
 80007b2:	6013      	str	r3, [r2, #0]
			}
			vertical_counter = newYellowCounter;
 80007b4:	4b38      	ldr	r3, [pc, #224]	; (8000898 <fsm_manual_run+0x240>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a36      	ldr	r2, [pc, #216]	; (8000894 <fsm_manual_run+0x23c>)
 80007ba:	6013      	str	r3, [r2, #0]
			updateClockBuffer(vertical_counter, horizontal_counter);
 80007bc:	4b35      	ldr	r3, [pc, #212]	; (8000894 <fsm_manual_run+0x23c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a32      	ldr	r2, [pc, #200]	; (800088c <fsm_manual_run+0x234>)
 80007c2:	6812      	ldr	r2, [r2, #0]
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 feba 	bl	8001540 <updateClockBuffer>
		}

		if (isButton3Pressed()) {
 80007cc:	f7ff fcfa 	bl	80001c4 <isButton3Pressed>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d051      	beq.n	800087a <fsm_manual_run+0x222>
			status = START;
 80007d6:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <fsm_manual_run+0x22c>)
 80007d8:	2201      	movs	r2, #1
 80007da:	601a      	str	r2, [r3, #0]
		}
		break;
 80007dc:	e04d      	b.n	800087a <fsm_manual_run+0x222>
	case GREEN_MANUAL:
		//TODO:
		toggleGreen();
 80007de:	f000 fe8f 	bl	8001500 <toggleGreen>

		//SET UP FOR THE NEXT STATE
		if (isButton1Pressed()) {
 80007e2:	f7ff fcb3 	bl	800014c <isButton1Pressed>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d013      	beq.n	8000814 <fsm_manual_run+0x1bc>
			status = RED_MANUAL;
 80007ec:	4b25      	ldr	r3, [pc, #148]	; (8000884 <fsm_manual_run+0x22c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	601a      	str	r2, [r3, #0]
			turnOffAllLeds();
 80007f2:	f000 fdb3 	bl	800135c <turnOffAllLeds>

			horizontal_counter = 2;
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <fsm_manual_run+0x234>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	601a      	str	r2, [r3, #0]
			vertical_counter = newRedCounter;
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <fsm_manual_run+0x238>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a24      	ldr	r2, [pc, #144]	; (8000894 <fsm_manual_run+0x23c>)
 8000802:	6013      	str	r3, [r2, #0]
			updateClockBuffer(vertical_counter, horizontal_counter);
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <fsm_manual_run+0x23c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a20      	ldr	r2, [pc, #128]	; (800088c <fsm_manual_run+0x234>)
 800080a:	6812      	ldr	r2, [r2, #0]
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fe96 	bl	8001540 <updateClockBuffer>
		}

		if (isButton2Pressed()) {
 8000814:	f7ff fcb8 	bl	8000188 <isButton2Pressed>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d012      	beq.n	8000844 <fsm_manual_run+0x1ec>
			newGreenCounter = newRedCounter - newYellowCounter;
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <fsm_manual_run+0x238>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <fsm_manual_run+0x240>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	4a1d      	ldr	r2, [pc, #116]	; (80008a0 <fsm_manual_run+0x248>)
 800082a:	6013      	str	r3, [r2, #0]
			vertical_counter = newGreenCounter;
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <fsm_manual_run+0x248>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a18      	ldr	r2, [pc, #96]	; (8000894 <fsm_manual_run+0x23c>)
 8000832:	6013      	str	r3, [r2, #0]
			updateClockBuffer(vertical_counter, horizontal_counter);
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <fsm_manual_run+0x23c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <fsm_manual_run+0x234>)
 800083a:	6812      	ldr	r2, [r2, #0]
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fe7e 	bl	8001540 <updateClockBuffer>
		}

		if (isButton3Pressed()) {
 8000844:	f7ff fcbe 	bl	80001c4 <isButton3Pressed>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d017      	beq.n	800087e <fsm_manual_run+0x226>
			redCounter = newRedCounter;
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <fsm_manual_run+0x238>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <fsm_manual_run+0x244>)
 8000854:	6013      	str	r3, [r2, #0]
			greenCounter = newGreenCounter;
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <fsm_manual_run+0x248>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <fsm_manual_run+0x250>)
 800085c:	6013      	str	r3, [r2, #0]
			yellowCounter = newYellowCounter;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <fsm_manual_run+0x240>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <fsm_manual_run+0x24c>)
 8000864:	6013      	str	r3, [r2, #0]

			status = START;
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <fsm_manual_run+0x22c>)
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
		}
		break;
 800086c:	e007      	b.n	800087e <fsm_manual_run+0x226>
	default:
		return;
 800086e:	bf00      	nop
 8000870:	e006      	b.n	8000880 <fsm_manual_run+0x228>
		break;
 8000872:	bf00      	nop
 8000874:	e004      	b.n	8000880 <fsm_manual_run+0x228>
		break;
 8000876:	bf00      	nop
 8000878:	e002      	b.n	8000880 <fsm_manual_run+0x228>
		break;
 800087a:	bf00      	nop
 800087c:	e000      	b.n	8000880 <fsm_manual_run+0x228>
		break;
 800087e:	bf00      	nop
	}

}
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000084 	.word	0x20000084
 8000888:	20000080 	.word	0x20000080
 800088c:	20000090 	.word	0x20000090
 8000890:	2000009c 	.word	0x2000009c
 8000894:	2000008c 	.word	0x2000008c
 8000898:	200000a0 	.word	0x200000a0
 800089c:	20000040 	.word	0x20000040
 80008a0:	200000a4 	.word	0x200000a4
 80008a4:	20000044 	.word	0x20000044
 80008a8:	20000048 	.word	0x20000048

080008ac <display0>:
 *      Author: DEll P5530
 */

#include "led7segments.h"

void display0() {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2101      	movs	r1, #1
 80008b4:	4811      	ldr	r0, [pc, #68]	; (80008fc <display0+0x50>)
 80008b6:	f001 fa10 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2102      	movs	r1, #2
 80008be:	480f      	ldr	r0, [pc, #60]	; (80008fc <display0+0x50>)
 80008c0:	f001 fa0b 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2104      	movs	r1, #4
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <display0+0x50>)
 80008ca:	f001 fa06 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2108      	movs	r1, #8
 80008d2:	480a      	ldr	r0, [pc, #40]	; (80008fc <display0+0x50>)
 80008d4:	f001 fa01 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2110      	movs	r1, #16
 80008dc:	4807      	ldr	r0, [pc, #28]	; (80008fc <display0+0x50>)
 80008de:	f001 f9fc 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2120      	movs	r1, #32
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <display0+0x50>)
 80008e8:	f001 f9f7 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2140      	movs	r1, #64	; 0x40
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <display0+0x50>)
 80008f2:	f001 f9f2 	bl	8001cda <HAL_GPIO_WritePin>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40010c00 	.word	0x40010c00

08000900 <display1>:
//	HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SEG_12_GPIO_Port, SEG_12_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SEG_13_GPIO_Port, SEG_13_Pin, GPIO_PIN_SET);
//}

void display1() {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2102      	movs	r1, #2
 8000908:	4811      	ldr	r0, [pc, #68]	; (8000950 <display1+0x50>)
 800090a:	f001 f9e6 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2104      	movs	r1, #4
 8000912:	480f      	ldr	r0, [pc, #60]	; (8000950 <display1+0x50>)
 8000914:	f001 f9e1 	bl	8001cda <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2101      	movs	r1, #1
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <display1+0x50>)
 800091e:	f001 f9dc 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2108      	movs	r1, #8
 8000926:	480a      	ldr	r0, [pc, #40]	; (8000950 <display1+0x50>)
 8000928:	f001 f9d7 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2110      	movs	r1, #16
 8000930:	4807      	ldr	r0, [pc, #28]	; (8000950 <display1+0x50>)
 8000932:	f001 f9d2 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2120      	movs	r1, #32
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <display1+0x50>)
 800093c:	f001 f9cd 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2140      	movs	r1, #64	; 0x40
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <display1+0x50>)
 8000946:	f001 f9c8 	bl	8001cda <HAL_GPIO_WritePin>
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40010c00 	.word	0x40010c00

08000954 <display2>:
//	HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(SEG_12_GPIO_Port, SEG_12_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(SEG_13_GPIO_Port, SEG_13_Pin, GPIO_PIN_SET);
//}

void display2() {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	4811      	ldr	r0, [pc, #68]	; (80009a4 <display2+0x50>)
 800095e:	f001 f9bc 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2102      	movs	r1, #2
 8000966:	480f      	ldr	r0, [pc, #60]	; (80009a4 <display2+0x50>)
 8000968:	f001 f9b7 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2108      	movs	r1, #8
 8000970:	480c      	ldr	r0, [pc, #48]	; (80009a4 <display2+0x50>)
 8000972:	f001 f9b2 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2110      	movs	r1, #16
 800097a:	480a      	ldr	r0, [pc, #40]	; (80009a4 <display2+0x50>)
 800097c:	f001 f9ad 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2140      	movs	r1, #64	; 0x40
 8000984:	4807      	ldr	r0, [pc, #28]	; (80009a4 <display2+0x50>)
 8000986:	f001 f9a8 	bl	8001cda <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_SET);
 800098a:	2201      	movs	r2, #1
 800098c:	2104      	movs	r1, #4
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <display2+0x50>)
 8000990:	f001 f9a3 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2120      	movs	r1, #32
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <display2+0x50>)
 800099a:	f001 f99e 	bl	8001cda <HAL_GPIO_WritePin>
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40010c00 	.word	0x40010c00

080009a8 <display3>:
//
//	HAL_GPIO_WritePin(SEG_9_GPIO_Port, SEG_9_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(SEG_12_GPIO_Port, SEG_12_Pin, GPIO_PIN_SET);
//}

void display3() {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2110      	movs	r1, #16
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <display3+0x50>)
 80009b2:	f001 f992 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2120      	movs	r1, #32
 80009ba:	480f      	ldr	r0, [pc, #60]	; (80009f8 <display3+0x50>)
 80009bc:	f001 f98d 	bl	8001cda <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2101      	movs	r1, #1
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <display3+0x50>)
 80009c6:	f001 f988 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2102      	movs	r1, #2
 80009ce:	480a      	ldr	r0, [pc, #40]	; (80009f8 <display3+0x50>)
 80009d0:	f001 f983 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2104      	movs	r1, #4
 80009d8:	4807      	ldr	r0, [pc, #28]	; (80009f8 <display3+0x50>)
 80009da:	f001 f97e 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2108      	movs	r1, #8
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <display3+0x50>)
 80009e4:	f001 f979 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2140      	movs	r1, #64	; 0x40
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <display3+0x50>)
 80009ee:	f001 f974 	bl	8001cda <HAL_GPIO_WritePin>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40010c00 	.word	0x40010c00

080009fc <display4>:
//	HAL_GPIO_WritePin(SEG_9_GPIO_Port, SEG_9_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SEG_10_GPIO_Port, SEG_10_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SEG_13_GPIO_Port, SEG_13_Pin, GPIO_PIN_RESET);
//}

void display4() {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2101      	movs	r1, #1
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <display4+0x50>)
 8000a06:	f001 f968 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	480f      	ldr	r0, [pc, #60]	; (8000a4c <display4+0x50>)
 8000a10:	f001 f963 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2110      	movs	r1, #16
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <display4+0x50>)
 8000a1a:	f001 f95e 	bl	8001cda <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2102      	movs	r1, #2
 8000a22:	480a      	ldr	r0, [pc, #40]	; (8000a4c <display4+0x50>)
 8000a24:	f001 f959 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <display4+0x50>)
 8000a2e:	f001 f954 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2120      	movs	r1, #32
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <display4+0x50>)
 8000a38:	f001 f94f 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2140      	movs	r1, #64	; 0x40
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <display4+0x50>)
 8000a42:	f001 f94a 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010c00 	.word	0x40010c00

08000a50 <display5>:
//	HAL_GPIO_WritePin(SEG_9_GPIO_Port, SEG_9_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SEG_12_GPIO_Port, SEG_12_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SEG_13_GPIO_Port, SEG_13_Pin, GPIO_PIN_RESET);
//}

void display5() {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2102      	movs	r1, #2
 8000a58:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <display5+0x50>)
 8000a5a:	f001 f93e 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2110      	movs	r1, #16
 8000a62:	480f      	ldr	r0, [pc, #60]	; (8000aa0 <display5+0x50>)
 8000a64:	f001 f939 	bl	8001cda <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <display5+0x50>)
 8000a6e:	f001 f934 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2104      	movs	r1, #4
 8000a76:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <display5+0x50>)
 8000a78:	f001 f92f 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2108      	movs	r1, #8
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <display5+0x50>)
 8000a82:	f001 f92a 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2120      	movs	r1, #32
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <display5+0x50>)
 8000a8c:	f001 f925 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2140      	movs	r1, #64	; 0x40
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <display5+0x50>)
 8000a96:	f001 f920 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40010c00 	.word	0x40010c00

08000aa4 <display6>:
//	HAL_GPIO_WritePin(SEG_10_GPIO_Port, SEG_10_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SEG_12_GPIO_Port, SEG_12_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SEG_13_GPIO_Port, SEG_13_Pin, GPIO_PIN_RESET);
//}

void display6() {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4811      	ldr	r0, [pc, #68]	; (8000af4 <display6+0x50>)
 8000aae:	f001 f914 	bl	8001cda <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	480f      	ldr	r0, [pc, #60]	; (8000af4 <display6+0x50>)
 8000ab8:	f001 f90f 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2104      	movs	r1, #4
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <display6+0x50>)
 8000ac2:	f001 f90a 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2108      	movs	r1, #8
 8000aca:	480a      	ldr	r0, [pc, #40]	; (8000af4 <display6+0x50>)
 8000acc:	f001 f905 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2110      	movs	r1, #16
 8000ad4:	4807      	ldr	r0, [pc, #28]	; (8000af4 <display6+0x50>)
 8000ad6:	f001 f900 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2120      	movs	r1, #32
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <display6+0x50>)
 8000ae0:	f001 f8fb 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2140      	movs	r1, #64	; 0x40
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <display6+0x50>)
 8000aea:	f001 f8f6 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40010c00 	.word	0x40010c00

08000af8 <display7>:
//	HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SEG_12_GPIO_Port, SEG_12_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SEG_13_GPIO_Port, SEG_13_Pin, GPIO_PIN_RESET);
//}

void display7() {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2101      	movs	r1, #1
 8000b00:	4811      	ldr	r0, [pc, #68]	; (8000b48 <display7+0x50>)
 8000b02:	f001 f8ea 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2102      	movs	r1, #2
 8000b0a:	480f      	ldr	r0, [pc, #60]	; (8000b48 <display7+0x50>)
 8000b0c:	f001 f8e5 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2104      	movs	r1, #4
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <display7+0x50>)
 8000b16:	f001 f8e0 	bl	8001cda <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2108      	movs	r1, #8
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <display7+0x50>)
 8000b20:	f001 f8db 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2110      	movs	r1, #16
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <display7+0x50>)
 8000b2a:	f001 f8d6 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2120      	movs	r1, #32
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <display7+0x50>)
 8000b34:	f001 f8d1 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2140      	movs	r1, #64	; 0x40
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <display7+0x50>)
 8000b3e:	f001 f8cc 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40010c00 	.word	0x40010c00

08000b4c <display8>:
//	HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(SEG_12_GPIO_Port, SEG_12_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(SEG_13_GPIO_Port, SEG_13_Pin, GPIO_PIN_SET);
//}

void display8() {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2101      	movs	r1, #1
 8000b54:	4811      	ldr	r0, [pc, #68]	; (8000b9c <display8+0x50>)
 8000b56:	f001 f8c0 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	480f      	ldr	r0, [pc, #60]	; (8000b9c <display8+0x50>)
 8000b60:	f001 f8bb 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2104      	movs	r1, #4
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <display8+0x50>)
 8000b6a:	f001 f8b6 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2108      	movs	r1, #8
 8000b72:	480a      	ldr	r0, [pc, #40]	; (8000b9c <display8+0x50>)
 8000b74:	f001 f8b1 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <display8+0x50>)
 8000b7e:	f001 f8ac 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2120      	movs	r1, #32
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <display8+0x50>)
 8000b88:	f001 f8a7 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2140      	movs	r1, #64	; 0x40
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <display8+0x50>)
 8000b92:	f001 f8a2 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40010c00 	.word	0x40010c00

08000ba0 <display9>:
//	HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SEG_12_GPIO_Port, SEG_12_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SEG_13_GPIO_Port, SEG_13_Pin, GPIO_PIN_RESET);
//}

void display9() {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <display9+0x50>)
 8000baa:	f001 f896 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	480f      	ldr	r0, [pc, #60]	; (8000bf0 <display9+0x50>)
 8000bb4:	f001 f891 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2104      	movs	r1, #4
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <display9+0x50>)
 8000bbe:	f001 f88c 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <display9+0x50>)
 8000bc8:	f001 f887 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2110      	movs	r1, #16
 8000bd0:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <display9+0x50>)
 8000bd2:	f001 f882 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2120      	movs	r1, #32
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <display9+0x50>)
 8000bdc:	f001 f87d 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <display9+0x50>)
 8000be6:	f001 f878 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40010c00 	.word	0x40010c00

08000bf4 <display7SEG>:
//	HAL_GPIO_WritePin(SEG_11_GPIO_Port, SEG_11_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(SEG_12_GPIO_Port, SEG_12_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(SEG_13_GPIO_Port, SEG_13_Pin, GPIO_PIN_RESET);
//}

void display7SEG(int num) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN3_Pin | EN4_Pin, GPIO_PIN_RESET);	//turn on all 7-segment leds
	if (num == 0) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d102      	bne.n	8000c08 <display7SEG+0x14>
		display0();
 8000c02:	f7ff fe53 	bl	80008ac <display0>
		display8();
	}
	else if (num == 9) {
		display9();
	}
}
 8000c06:	e034      	b.n	8000c72 <display7SEG+0x7e>
	else if (num == 1) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d102      	bne.n	8000c14 <display7SEG+0x20>
		display1();
 8000c0e:	f7ff fe77 	bl	8000900 <display1>
}
 8000c12:	e02e      	b.n	8000c72 <display7SEG+0x7e>
	else if (num == 2) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d102      	bne.n	8000c20 <display7SEG+0x2c>
		display2();
 8000c1a:	f7ff fe9b 	bl	8000954 <display2>
}
 8000c1e:	e028      	b.n	8000c72 <display7SEG+0x7e>
	else if (num == 3) {
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d102      	bne.n	8000c2c <display7SEG+0x38>
		display3();
 8000c26:	f7ff febf 	bl	80009a8 <display3>
}
 8000c2a:	e022      	b.n	8000c72 <display7SEG+0x7e>
	else if (num == 4) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	d102      	bne.n	8000c38 <display7SEG+0x44>
		display4();
 8000c32:	f7ff fee3 	bl	80009fc <display4>
}
 8000c36:	e01c      	b.n	8000c72 <display7SEG+0x7e>
	else if (num == 5) {
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b05      	cmp	r3, #5
 8000c3c:	d102      	bne.n	8000c44 <display7SEG+0x50>
		display5();
 8000c3e:	f7ff ff07 	bl	8000a50 <display5>
}
 8000c42:	e016      	b.n	8000c72 <display7SEG+0x7e>
	else if (num == 6) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d102      	bne.n	8000c50 <display7SEG+0x5c>
		display6();
 8000c4a:	f7ff ff2b 	bl	8000aa4 <display6>
}
 8000c4e:	e010      	b.n	8000c72 <display7SEG+0x7e>
	else if (num == 7) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b07      	cmp	r3, #7
 8000c54:	d102      	bne.n	8000c5c <display7SEG+0x68>
		display7();
 8000c56:	f7ff ff4f 	bl	8000af8 <display7>
}
 8000c5a:	e00a      	b.n	8000c72 <display7SEG+0x7e>
	else if (num == 8) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b08      	cmp	r3, #8
 8000c60:	d102      	bne.n	8000c68 <display7SEG+0x74>
		display8();
 8000c62:	f7ff ff73 	bl	8000b4c <display8>
}
 8000c66:	e004      	b.n	8000c72 <display7SEG+0x7e>
	else if (num == 9) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b09      	cmp	r3, #9
 8000c6c:	d101      	bne.n	8000c72 <display7SEG+0x7e>
		display9();
 8000c6e:	f7ff ff97 	bl	8000ba0 <display9>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c80:	f000 fd2a 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c84:	f000 f834 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c88:	f000 f8ba 	bl	8000e00 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c8c:	f000 f86c 	bl	8000d68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c90:	4810      	ldr	r0, [pc, #64]	; (8000cd4 <main+0x58>)
 8000c92:	f001 fc7f 	bl	8002594 <HAL_TIM_Base_Start_IT>
//  setTimerFor7segLed(250);	//test
//  initial();

//------------run lab 3------------------
//  setTimer1(1000);
  status = START;
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <main+0x5c>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]
//------------run lab 3------------------

//  SCH_Add_Task(testScheduler, 0, 50);
//  SCH_Add_Task(testOneShotTask, 0, 0);

  SCH_Add_Task(scan7SegLedTask, 0, 25);
 8000c9c:	2219      	movs	r2, #25
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	480e      	ldr	r0, [pc, #56]	; (8000cdc <main+0x60>)
 8000ca2:	f000 f921 	bl	8000ee8 <SCH_Add_Task>
  SCH_Add_Task(oneSecondTask, 0, 100);
 8000ca6:	2264      	movs	r2, #100	; 0x64
 8000ca8:	2100      	movs	r1, #0
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <main+0x64>)
 8000cac:	f000 f91c 	bl	8000ee8 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 1);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <main+0x68>)
 8000cb6:	f000 f917 	bl	8000ee8 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 0, 5);
 8000cba:	2205      	movs	r2, #5
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <main+0x6c>)
 8000cc0:	f000 f912 	bl	8000ee8 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 5);
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4808      	ldr	r0, [pc, #32]	; (8000cec <main+0x70>)
 8000cca:	f000 f90d 	bl	8000ee8 <SCH_Add_Task>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  SCH_Dispatch_Tasks();
 8000cce:	f000 f9bf 	bl	8001050 <SCH_Dispatch_Tasks>
 8000cd2:	e7fc      	b.n	8000cce <main+0x52>
 8000cd4:	200000bc 	.word	0x200000bc
 8000cd8:	20000084 	.word	0x20000084
 8000cdc:	08000409 	.word	0x08000409
 8000ce0:	080003b9 	.word	0x080003b9
 8000ce4:	08000201 	.word	0x08000201
 8000ce8:	080005d5 	.word	0x080005d5
 8000cec:	08000659 	.word	0x08000659

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b090      	sub	sp, #64	; 0x40
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0318 	add.w	r3, r7, #24
 8000cfa:	2228      	movs	r2, #40	; 0x28
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 fff8 	bl	8002cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d16:	2301      	movs	r3, #1
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d1a:	2310      	movs	r3, #16
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d22:	f107 0318 	add.w	r3, r7, #24
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 f808 	bl	8001d3c <HAL_RCC_OscConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d32:	f000 f8d3 	bl	8000edc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d36:	230f      	movs	r3, #15
 8000d38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 fa74 	bl	800223c <HAL_RCC_ClockConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d5a:	f000 f8bf 	bl	8000edc <Error_Handler>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3740      	adds	r7, #64	; 0x40
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000d8e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000d9c:	2209      	movs	r2, #9
 8000d9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dac:	4813      	ldr	r0, [pc, #76]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000dae:	f001 fba1 	bl	80024f4 <HAL_TIM_Base_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000db8:	f000 f890 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000dca:	f001 fd1f 	bl	800280c <HAL_TIM_ConfigClockSource>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dd4:	f000 f882 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_TIM2_Init+0x94>)
 8000de6:	f001 fef7 	bl	8002bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000df0:	f000 f874 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200000bc 	.word	0x200000bc

08000e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <MX_GPIO_Init+0xbc>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a28      	ldr	r2, [pc, #160]	; (8000ebc <MX_GPIO_Init+0xbc>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <MX_GPIO_Init+0xbc>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <MX_GPIO_Init+0xbc>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <MX_GPIO_Init+0xbc>)
 8000e32:	f043 0308 	orr.w	r3, r3, #8
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <MX_GPIO_Init+0xbc>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8000e44:	2200      	movs	r2, #0
 8000e46:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8000e4a:	481d      	ldr	r0, [pc, #116]	; (8000ec0 <MX_GPIO_Init+0xc0>)
 8000e4c:	f000 ff45 	bl	8001cda <HAL_GPIO_WritePin>
                          |LED_5_Pin|LED_6_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|LED_BLUE_Pin
 8000e50:	2200      	movs	r2, #0
 8000e52:	f248 01ff 	movw	r1, #33023	; 0x80ff
 8000e56:	481b      	ldr	r0, [pc, #108]	; (8000ec4 <MX_GPIO_Init+0xc4>)
 8000e58:	f000 ff3f 	bl	8001cda <HAL_GPIO_WritePin>
                          |LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
                           LED_5_Pin LED_6_Pin EN1_Pin EN2_Pin
                           EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8000e5c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000e60:	60bb      	str	r3, [r7, #8]
                          |LED_5_Pin|LED_6_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	4619      	mov	r1, r3
 8000e74:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <MX_GPIO_Init+0xc0>)
 8000e76:	f000 fd9f 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin LED_BLUE_Pin
                           SEG_3_Pin SEG_4_Pin SEG_5_Pin SEG_6_Pin
                           LED_RED_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|LED_BLUE_Pin
 8000e7a:	f248 03ff 	movw	r3, #33023	; 0x80ff
 8000e7e:	60bb      	str	r3, [r7, #8]
                          |SEG_3_Pin|SEG_4_Pin|SEG_5_Pin|SEG_6_Pin
                          |LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	4619      	mov	r1, r3
 8000e92:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <MX_GPIO_Init+0xc4>)
 8000e94:	f000 fd90 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000e98:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <MX_GPIO_Init+0xc0>)
 8000eae:	f000 fd83 	bl	80019b8 <HAL_GPIO_Init>

}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010800 	.word	0x40010800
 8000ec4:	40010c00 	.word	0x40010c00

08000ec8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
//	timerRun();
//	getKeyInput();

	SCH_Update();
 8000ed0:	f000 f860 	bl	8000f94 <SCH_Update>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <SCH_Add_Task>:
void SCH_Init(void) {
	current_index_task = 0;
}

void SCH_Add_Task (void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	if (current_index_task < SCH_MAX_TASKS) {
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <SCH_Add_Task+0xa4>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b27      	cmp	r3, #39	; 0x27
 8000efa:	d842      	bhi.n	8000f82 <SCH_Add_Task+0x9a>
		SCH_tasks_G[current_index_task].pTask = pFunction;
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <SCH_Add_Task+0xa4>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	4a23      	ldr	r2, [pc, #140]	; (8000f90 <SCH_Add_Task+0xa8>)
 8000f04:	460b      	mov	r3, r1
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	440b      	add	r3, r1
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <SCH_Add_Task+0xa4>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4619      	mov	r1, r3
 8000f18:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <SCH_Add_Task+0xa8>)
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	440b      	add	r3, r1
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	3304      	adds	r3, #4
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <SCH_Add_Task+0xa4>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <SCH_Add_Task+0xa8>)
 8000f32:	460b      	mov	r3, r1
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	440b      	add	r3, r1
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3308      	adds	r3, #8
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <SCH_Add_Task+0xa4>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <SCH_Add_Task+0xa8>)
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	330c      	adds	r3, #12
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <SCH_Add_Task+0xa4>)
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <SCH_Add_Task+0xa4>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4610      	mov	r0, r2
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <SCH_Add_Task+0xa8>)
 8000f68:	460b      	mov	r3, r1
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	3310      	adds	r3, #16
 8000f74:	6018      	str	r0, [r3, #0]

		current_index_task++;
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SCH_Add_Task+0xa4>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <SCH_Add_Task+0xa4>)
 8000f80:	701a      	strb	r2, [r3, #0]
	}
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	20000088 	.word	0x20000088
 8000f90:	20000104 	.word	0x20000104

08000f94 <SCH_Update>:

void SCH_Update(void) {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	e046      	b.n	800102e <SCH_Update+0x9a>
		if (SCH_tasks_G[i].Delay > 0) {
 8000fa0:	4929      	ldr	r1, [pc, #164]	; (8001048 <SCH_Update+0xb4>)
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	3304      	adds	r3, #4
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d013      	beq.n	8000fde <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 8000fb6:	4924      	ldr	r1, [pc, #144]	; (8001048 <SCH_Update+0xb4>)
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	1e59      	subs	r1, r3, #1
 8000fca:	481f      	ldr	r0, [pc, #124]	; (8001048 <SCH_Update+0xb4>)
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4403      	add	r3, r0
 8000fd8:	3304      	adds	r3, #4
 8000fda:	6019      	str	r1, [r3, #0]
 8000fdc:	e024      	b.n	8001028 <SCH_Update+0x94>
		}
		else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8000fde:	491a      	ldr	r1, [pc, #104]	; (8001048 <SCH_Update+0xb4>)
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	440b      	add	r3, r1
 8000fec:	3308      	adds	r3, #8
 8000fee:	6819      	ldr	r1, [r3, #0]
 8000ff0:	4815      	ldr	r0, [pc, #84]	; (8001048 <SCH_Update+0xb4>)
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4403      	add	r3, r0
 8000ffe:	3304      	adds	r3, #4
 8001000:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8001002:	4911      	ldr	r1, [pc, #68]	; (8001048 <SCH_Update+0xb4>)
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	330c      	adds	r3, #12
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	1c59      	adds	r1, r3, #1
 8001016:	480c      	ldr	r0, [pc, #48]	; (8001048 <SCH_Update+0xb4>)
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4403      	add	r3, r0
 8001024:	330c      	adds	r3, #12
 8001026:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < current_index_task; i++) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3301      	adds	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <SCH_Update+0xb8>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4293      	cmp	r3, r2
 8001038:	dbb2      	blt.n	8000fa0 <SCH_Update+0xc>
		}
	}
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000104 	.word	0x20000104
 800104c:	20000088 	.word	0x20000088

08001050 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; i++) {
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	e043      	b.n	80010e4 <SCH_Dispatch_Tasks+0x94>
		if (SCH_tasks_G[i].RunMe > 0) {
 800105c:	4927      	ldr	r1, [pc, #156]	; (80010fc <SCH_Dispatch_Tasks+0xac>)
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	330c      	adds	r3, #12
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d035      	beq.n	80010de <SCH_Dispatch_Tasks+0x8e>
			SCH_tasks_G[i].RunMe--;
 8001072:	4922      	ldr	r1, [pc, #136]	; (80010fc <SCH_Dispatch_Tasks+0xac>)
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	440b      	add	r3, r1
 8001080:	330c      	adds	r3, #12
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	1e59      	subs	r1, r3, #1
 8001086:	481d      	ldr	r0, [pc, #116]	; (80010fc <SCH_Dispatch_Tasks+0xac>)
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4403      	add	r3, r0
 8001094:	330c      	adds	r3, #12
 8001096:	6019      	str	r1, [r3, #0]

			(*SCH_tasks_G[i].pTask)();
 8001098:	4918      	ldr	r1, [pc, #96]	; (80010fc <SCH_Dispatch_Tasks+0xac>)
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4798      	blx	r3

			//one-shot task need to be deleted after finishing running
			if (SCH_tasks_G[i].Period == 0) {
 80010aa:	4914      	ldr	r1, [pc, #80]	; (80010fc <SCH_Dispatch_Tasks+0xac>)
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	3308      	adds	r3, #8
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10e      	bne.n	80010de <SCH_Dispatch_Tasks+0x8e>
				SCH_Delete(SCH_tasks_G[i].TaskID);
 80010c0:	490e      	ldr	r1, [pc, #56]	; (80010fc <SCH_Dispatch_Tasks+0xac>)
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	3310      	adds	r3, #16
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f816 	bl	8001104 <SCH_Delete>

				i--;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < current_index_task; i++) {
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3301      	adds	r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <SCH_Dispatch_Tasks+0xb0>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4293      	cmp	r3, r2
 80010ee:	dbb5      	blt.n	800105c <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000104 	.word	0x20000104
 8001100:	20000088 	.word	0x20000088

08001104 <SCH_Delete>:

void SCH_Delete(uint32_t ID)
{
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < current_index_task; i++) {
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	e036      	b.n	8001180 <SCH_Delete+0x7c>
		if (SCH_tasks_G[i].TaskID == ID) {
 8001112:	4923      	ldr	r1, [pc, #140]	; (80011a0 <SCH_Delete+0x9c>)
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	3310      	adds	r3, #16
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	d127      	bne.n	800117a <SCH_Delete+0x76>
			for (int j = i; j < current_index_task - 1; j++) {
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	e017      	b.n	8001160 <SCH_Delete+0x5c>
				SCH_tasks_G[j] = SCH_tasks_G[j + 1];
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	481a      	ldr	r0, [pc, #104]	; (80011a0 <SCH_Delete+0x9c>)
 8001136:	68b9      	ldr	r1, [r7, #8]
 8001138:	460b      	mov	r3, r1
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4418      	add	r0, r3
 8001142:	4917      	ldr	r1, [pc, #92]	; (80011a0 <SCH_Delete+0x9c>)
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	4604      	mov	r4, r0
 8001150:	461d      	mov	r5, r3
 8001152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001156:	682b      	ldr	r3, [r5, #0]
 8001158:	6023      	str	r3, [r4, #0]
			for (int j = i; j < current_index_task - 1; j++) {
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	3301      	adds	r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <SCH_Delete+0xa0>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	3b01      	subs	r3, #1
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	429a      	cmp	r2, r3
 800116a:	dbe1      	blt.n	8001130 <SCH_Delete+0x2c>
			}

			current_index_task--;
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <SCH_Delete+0xa0>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	3b01      	subs	r3, #1
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <SCH_Delete+0xa0>)
 8001176:	701a      	strb	r2, [r3, #0]
			return;
 8001178:	e00e      	b.n	8001198 <SCH_Delete+0x94>
	for (int i = 0; i < current_index_task; i++) {
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3301      	adds	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <SCH_Delete+0xa0>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4293      	cmp	r3, r2
 800118a:	dbc2      	blt.n	8001112 <SCH_Delete+0xe>
		}
	}
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <SCH_Delete+0xa4>)
 8001194:	f000 fda1 	bl	8001cda <HAL_GPIO_WritePin>
}
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bdb0      	pop	{r4, r5, r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000104 	.word	0x20000104
 80011a4:	20000088 	.word	0x20000088
 80011a8:	40010c00 	.word	0x40010c00

080011ac <SCH_Get_Task_ID>:

uint32_t SCH_Get_Task_ID(void (*pFunction)()) {
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < current_index_task; i++) {
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e017      	b.n	80011ea <SCH_Get_Task_ID+0x3e>
        if (SCH_tasks_G[i].pTask == pFunction) {
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	4911      	ldr	r1, [pc, #68]	; (8001204 <SCH_Get_Task_ID+0x58>)
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d109      	bne.n	80011e4 <SCH_Get_Task_ID+0x38>
            return SCH_tasks_G[i].TaskID;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	490c      	ldr	r1, [pc, #48]	; (8001204 <SCH_Get_Task_ID+0x58>)
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	3310      	adds	r3, #16
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	e009      	b.n	80011f8 <SCH_Get_Task_ID+0x4c>
    for (uint8_t i = 0; i < current_index_task; i++) {
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	3301      	adds	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <SCH_Get_Task_ID+0x5c>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d3e2      	bcc.n	80011ba <SCH_Get_Task_ID+0xe>
        }
    }
    // Trả về giá trị không hợp lệ nếu không tìm thấy
    return -1;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000104 	.word	0x20000104
 8001208:	20000088 	.word	0x20000088

0800120c <SCH_Delete_Task_By_Function>:

void SCH_Delete_Task_By_Function(void (*pFunction)()) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    uint32_t taskID = SCH_Get_Task_ID(pFunction);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ffc9 	bl	80011ac <SCH_Get_Task_ID>
 800121a:	60f8      	str	r0, [r7, #12]
    if (taskID != (uint32_t)-1) {
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001222:	d007      	beq.n	8001234 <SCH_Delete_Task_By_Function+0x28>

        SCH_Delete(taskID);
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f7ff ff6d 	bl	8001104 <SCH_Delete>
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	4803      	ldr	r0, [pc, #12]	; (800123c <SCH_Delete_Task_By_Function+0x30>)
 8001230:	f000 fd53 	bl	8001cda <HAL_GPIO_WritePin>
    }
    else {
//    	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
    }
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40010c00 	.word	0x40010c00

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_MspInit+0x5c>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	4a14      	ldr	r2, [pc, #80]	; (800129c <HAL_MspInit+0x5c>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6193      	str	r3, [r2, #24]
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_MspInit+0x5c>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_MspInit+0x5c>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_MspInit+0x5c>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_MspInit+0x5c>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_MspInit+0x60>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_MspInit+0x60>)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010000 	.word	0x40010000

080012a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b4:	d113      	bne.n	80012de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_TIM_Base_MspInit+0x44>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <HAL_TIM_Base_MspInit+0x44>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_TIM_Base_MspInit+0x44>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	201c      	movs	r0, #28
 80012d4:	f000 fb39 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012d8:	201c      	movs	r0, #28
 80012da:	f000 fb52 	bl	8001982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001332:	f000 fa17 	bl	8001764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <TIM2_IRQHandler+0x10>)
 8001342:	f001 f973 	bl	800262c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200000bc 	.word	0x200000bc

08001350 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <turnOffAllLeds>:
int newRedCounter = 0;
int newYellowCounter = 0;
int newGreenCounter = 0;

void turnOffAllLeds()
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin | LED_5_Pin | LED_6_Pin, GPIO_PIN_RESET);	//turn off all traffic lights
 8001360:	2200      	movs	r2, #0
 8001362:	217e      	movs	r1, #126	; 0x7e
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <turnOffAllLeds+0x14>)
 8001366:	f000 fcb8 	bl	8001cda <HAL_GPIO_WritePin>
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40010800 	.word	0x40010800

08001374 <initial>:

void initial()
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	turnOffAllLeds();
 8001378:	f7ff fff0 	bl	800135c <turnOffAllLeds>
	HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN3_Pin | EN4_Pin, GPIO_PIN_SET);	//turn off all 7-segment leds
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8001382:	4802      	ldr	r0, [pc, #8]	; (800138c <initial+0x18>)
 8001384:	f000 fca9 	bl	8001cda <HAL_GPIO_WritePin>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40010800 	.word	0x40010800

08001390 <turnOnRedGreen>:

void turnOnRedGreen()
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_6_Pin, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	214e      	movs	r1, #78	; 0x4e
 8001398:	4807      	ldr	r0, [pc, #28]	; (80013b8 <turnOnRedGreen+0x28>)
 800139a:	f000 fc9e 	bl	8001cda <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2120      	movs	r1, #32
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <turnOnRedGreen+0x28>)
 80013a4:	f000 fc99 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2110      	movs	r1, #16
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <turnOnRedGreen+0x28>)
 80013ae:	f000 fc94 	bl	8001cda <HAL_GPIO_WritePin>
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40010800 	.word	0x40010800

080013bc <turnOnRedYellow>:

void turnOnRedYellow()
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_2_Pin | LED_4_Pin | LED_6_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2156      	movs	r1, #86	; 0x56
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <turnOnRedYellow+0x28>)
 80013c6:	f000 fc88 	bl	8001cda <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	2120      	movs	r1, #32
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <turnOnRedYellow+0x28>)
 80013d0:	f000 fc83 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2108      	movs	r1, #8
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <turnOnRedYellow+0x28>)
 80013da:	f000 fc7e 	bl	8001cda <HAL_GPIO_WritePin>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40010800 	.word	0x40010800

080013e8 <turnOnGreenRed>:

void turnOnGreenRed()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_3_Pin | LED_4_Pin | LED_5_Pin | LED_6_Pin, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2178      	movs	r1, #120	; 0x78
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <turnOnGreenRed+0x28>)
 80013f2:	f000 fc72 	bl	8001cda <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2102      	movs	r1, #2
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <turnOnGreenRed+0x28>)
 80013fc:	f000 fc6d 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2104      	movs	r1, #4
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <turnOnGreenRed+0x28>)
 8001406:	f000 fc68 	bl	8001cda <HAL_GPIO_WritePin>
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40010800 	.word	0x40010800

08001414 <turnOnYellowRed>:

void turnOnYellowRed()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_3_Pin | LED_4_Pin | LED_5_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	213a      	movs	r1, #58	; 0x3a
 800141c:	4807      	ldr	r0, [pc, #28]	; (800143c <turnOnYellowRed+0x28>)
 800141e:	f000 fc5c 	bl	8001cda <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_6_GPIO_Port, LED_6_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	2140      	movs	r1, #64	; 0x40
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <turnOnYellowRed+0x28>)
 8001428:	f000 fc57 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2104      	movs	r1, #4
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <turnOnYellowRed+0x28>)
 8001432:	f000 fc52 	bl	8001cda <HAL_GPIO_WritePin>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40010800 	.word	0x40010800

08001440 <toggleAllLeds>:



void toggleAllLeds() {
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	currentTime = HAL_GetTick();
 8001444:	f000 f9a0 	bl	8001788 <HAL_GetTick>
 8001448:	4603      	mov	r3, r0
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <toggleAllLeds+0x34>)
 800144c:	6013      	str	r3, [r2, #0]
	if (currentTime - previousTime >= 500) {
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <toggleAllLeds+0x34>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <toggleAllLeds+0x38>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800145c:	d307      	bcc.n	800146e <toggleAllLeds+0x2e>
		HAL_GPIO_TogglePin(GPIOA, LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin | LED_5_Pin | LED_6_Pin);
 800145e:	217e      	movs	r1, #126	; 0x7e
 8001460:	4806      	ldr	r0, [pc, #24]	; (800147c <toggleAllLeds+0x3c>)
 8001462:	f000 fc52 	bl	8001d0a <HAL_GPIO_TogglePin>
		previousTime = currentTime;
 8001466:	4b03      	ldr	r3, [pc, #12]	; (8001474 <toggleAllLeds+0x34>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a03      	ldr	r2, [pc, #12]	; (8001478 <toggleAllLeds+0x38>)
 800146c:	6013      	str	r3, [r2, #0]
	}
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000094 	.word	0x20000094
 8001478:	20000098 	.word	0x20000098
 800147c:	40010800 	.word	0x40010800

08001480 <toggleRed>:

void toggleRed() {
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	currentTime = HAL_GetTick();
 8001484:	f000 f980 	bl	8001788 <HAL_GetTick>
 8001488:	4603      	mov	r3, r0
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <toggleRed+0x34>)
 800148c:	6013      	str	r3, [r2, #0]
	if (currentTime - previousTime >= 500) {
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <toggleRed+0x34>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <toggleRed+0x38>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800149c:	d307      	bcc.n	80014ae <toggleRed+0x2e>
		HAL_GPIO_TogglePin(GPIOA, LED_5_Pin | LED_2_Pin);
 800149e:	2124      	movs	r1, #36	; 0x24
 80014a0:	4806      	ldr	r0, [pc, #24]	; (80014bc <toggleRed+0x3c>)
 80014a2:	f000 fc32 	bl	8001d0a <HAL_GPIO_TogglePin>
		previousTime = currentTime;
 80014a6:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <toggleRed+0x34>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <toggleRed+0x38>)
 80014ac:	6013      	str	r3, [r2, #0]
	}
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000094 	.word	0x20000094
 80014b8:	20000098 	.word	0x20000098
 80014bc:	40010800 	.word	0x40010800

080014c0 <toggleYellow>:

void toggleYellow() {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	currentTime = HAL_GetTick();
 80014c4:	f000 f960 	bl	8001788 <HAL_GetTick>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <toggleYellow+0x34>)
 80014cc:	6013      	str	r3, [r2, #0]
	if (currentTime - previousTime >= 500) {
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <toggleYellow+0x34>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <toggleYellow+0x38>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014dc:	d307      	bcc.n	80014ee <toggleYellow+0x2e>
		HAL_GPIO_TogglePin(GPIOA, LED_6_Pin | LED_3_Pin);
 80014de:	2148      	movs	r1, #72	; 0x48
 80014e0:	4806      	ldr	r0, [pc, #24]	; (80014fc <toggleYellow+0x3c>)
 80014e2:	f000 fc12 	bl	8001d0a <HAL_GPIO_TogglePin>
		previousTime = currentTime;
 80014e6:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <toggleYellow+0x34>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a03      	ldr	r2, [pc, #12]	; (80014f8 <toggleYellow+0x38>)
 80014ec:	6013      	str	r3, [r2, #0]
	}
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000094 	.word	0x20000094
 80014f8:	20000098 	.word	0x20000098
 80014fc:	40010800 	.word	0x40010800

08001500 <toggleGreen>:

void toggleGreen() {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	currentTime = HAL_GetTick();
 8001504:	f000 f940 	bl	8001788 <HAL_GetTick>
 8001508:	4603      	mov	r3, r0
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <toggleGreen+0x34>)
 800150c:	6013      	str	r3, [r2, #0]
	if (currentTime - previousTime >= 500) {
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <toggleGreen+0x34>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <toggleGreen+0x38>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800151c:	d307      	bcc.n	800152e <toggleGreen+0x2e>
		HAL_GPIO_TogglePin(GPIOA, LED_1_Pin | LED_4_Pin);
 800151e:	2112      	movs	r1, #18
 8001520:	4806      	ldr	r0, [pc, #24]	; (800153c <toggleGreen+0x3c>)
 8001522:	f000 fbf2 	bl	8001d0a <HAL_GPIO_TogglePin>
		previousTime = currentTime;
 8001526:	4b03      	ldr	r3, [pc, #12]	; (8001534 <toggleGreen+0x34>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a03      	ldr	r2, [pc, #12]	; (8001538 <toggleGreen+0x38>)
 800152c:	6013      	str	r3, [r2, #0]
	}
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000094 	.word	0x20000094
 8001538:	20000098 	.word	0x20000098
 800153c:	40010800 	.word	0x40010800

08001540 <updateClockBuffer>:
//---------- just testing ---------------
//int led_buffer[4] = {1, 2, 3, 4};
//---------- just testing ---------------

void updateClockBuffer(int vertical_counter, int horizontal_counter)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]

		led_buffer[0] = vertical_counter / 10;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <updateClockBuffer+0x70>)
 800154e:	fb82 1203 	smull	r1, r2, r2, r3
 8001552:	1092      	asrs	r2, r2, #2
 8001554:	17db      	asrs	r3, r3, #31
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	4a16      	ldr	r2, [pc, #88]	; (80015b4 <updateClockBuffer+0x74>)
 800155a:	6013      	str	r3, [r2, #0]
		led_buffer[1] = vertical_counter % 10;
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <updateClockBuffer+0x70>)
 8001560:	fb83 2301 	smull	r2, r3, r3, r1
 8001564:	109a      	asrs	r2, r3, #2
 8001566:	17cb      	asrs	r3, r1, #31
 8001568:	1ad2      	subs	r2, r2, r3
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	1aca      	subs	r2, r1, r3
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <updateClockBuffer+0x74>)
 8001576:	605a      	str	r2, [r3, #4]

		led_buffer[2] = horizontal_counter / 10;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <updateClockBuffer+0x70>)
 800157c:	fb82 1203 	smull	r1, r2, r2, r3
 8001580:	1092      	asrs	r2, r2, #2
 8001582:	17db      	asrs	r3, r3, #31
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <updateClockBuffer+0x74>)
 8001588:	6093      	str	r3, [r2, #8]
		led_buffer[3] = horizontal_counter % 10;
 800158a:	6839      	ldr	r1, [r7, #0]
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <updateClockBuffer+0x70>)
 800158e:	fb83 2301 	smull	r2, r3, r3, r1
 8001592:	109a      	asrs	r2, r3, #2
 8001594:	17cb      	asrs	r3, r1, #31
 8001596:	1ad2      	subs	r2, r2, r3
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	1aca      	subs	r2, r1, r3
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <updateClockBuffer+0x74>)
 80015a4:	60da      	str	r2, [r3, #12]

}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	66666667 	.word	0x66666667
 80015b4:	200000ac 	.word	0x200000ac

080015b8 <update7seg>:

void update7seg(int index)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d859      	bhi.n	800167a <update7seg+0xc2>
 80015c6:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <update7seg+0x14>)
 80015c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015cc:	080015dd 	.word	0x080015dd
 80015d0:	08001603 	.word	0x08001603
 80015d4:	0800162b 	.word	0x0800162b
 80015d8:	08001653 	.word	0x08001653
	switch (index) {
		case 0:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);	//turn on the first 7-segment led
 80015dc:	2200      	movs	r2, #0
 80015de:	2180      	movs	r1, #128	; 0x80
 80015e0:	4828      	ldr	r0, [pc, #160]	; (8001684 <update7seg+0xcc>)
 80015e2:	f000 fb7a 	bl	8001cda <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin | EN3_Pin | EN4_Pin, GPIO_PIN_SET); 	//turn off the other 3 leds
 80015e6:	2201      	movs	r2, #1
 80015e8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80015ec:	4825      	ldr	r0, [pc, #148]	; (8001684 <update7seg+0xcc>)
 80015ee:	f000 fb74 	bl	8001cda <HAL_GPIO_WritePin>

			display7SEG(led_buffer[index]);
 80015f2:	4a25      	ldr	r2, [pc, #148]	; (8001688 <update7seg+0xd0>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fafa 	bl	8000bf4 <display7SEG>
			break;
 8001600:	e03c      	b.n	800167c <update7seg+0xc4>
		case 1:
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);	//turn on the second 7-segment led
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001608:	481e      	ldr	r0, [pc, #120]	; (8001684 <update7seg+0xcc>)
 800160a:	f000 fb66 	bl	8001cda <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN3_Pin | EN4_Pin, GPIO_PIN_SET);	//turn off the other 3 leds
 800160e:	2201      	movs	r2, #1
 8001610:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 8001614:	481b      	ldr	r0, [pc, #108]	; (8001684 <update7seg+0xcc>)
 8001616:	f000 fb60 	bl	8001cda <HAL_GPIO_WritePin>

			display7SEG(led_buffer[index]);
 800161a:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <update7seg+0xd0>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fae6 	bl	8000bf4 <display7SEG>
			break;
 8001628:	e028      	b.n	800167c <update7seg+0xc4>
		case 2:
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);	//turn on the third 7-segment led
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001630:	4814      	ldr	r0, [pc, #80]	; (8001684 <update7seg+0xcc>)
 8001632:	f000 fb52 	bl	8001cda <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN4_Pin, GPIO_PIN_SET);	//turn off the other 3 leds
 8001636:	2201      	movs	r2, #1
 8001638:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 800163c:	4811      	ldr	r0, [pc, #68]	; (8001684 <update7seg+0xcc>)
 800163e:	f000 fb4c 	bl	8001cda <HAL_GPIO_WritePin>

			display7SEG(led_buffer[index]);
 8001642:	4a11      	ldr	r2, [pc, #68]	; (8001688 <update7seg+0xd0>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fad2 	bl	8000bf4 <display7SEG>
			break;
 8001650:	e014      	b.n	800167c <update7seg+0xc4>
		case 3:
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, GPIO_PIN_RESET);	//turn on the fourth 7-segment led
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001658:	480a      	ldr	r0, [pc, #40]	; (8001684 <update7seg+0xcc>)
 800165a:	f000 fb3e 	bl	8001cda <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin | EN2_Pin | EN3_Pin , GPIO_PIN_SET);	//turn off the other 3 leds
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001664:	4807      	ldr	r0, [pc, #28]	; (8001684 <update7seg+0xcc>)
 8001666:	f000 fb38 	bl	8001cda <HAL_GPIO_WritePin>

			display7SEG(led_buffer[index]);
 800166a:	4a07      	ldr	r2, [pc, #28]	; (8001688 <update7seg+0xd0>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fabe 	bl	8000bf4 <display7SEG>
			break;
 8001678:	e000      	b.n	800167c <update7seg+0xc4>
		default:
			break;
 800167a:	bf00      	nop
	}

}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40010800 	.word	0x40010800
 8001688:	200000ac 	.word	0x200000ac

0800168c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800168c:	f7ff fe60 	bl	8001350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001690:	480b      	ldr	r0, [pc, #44]	; (80016c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001692:	490c      	ldr	r1, [pc, #48]	; (80016c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a09      	ldr	r2, [pc, #36]	; (80016cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016a8:	4c09      	ldr	r4, [pc, #36]	; (80016d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b6:	f001 faf9 	bl	8002cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ba:	f7ff fadf 	bl	8000c7c <main>
  bx lr
 80016be:	4770      	bx	lr
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80016c8:	08002d4c 	.word	0x08002d4c
  ldr r2, =_sbss
 80016cc:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80016d0:	20000428 	.word	0x20000428

080016d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC1_2_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_Init+0x28>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_Init+0x28>)
 80016e2:	f043 0310 	orr.w	r3, r3, #16
 80016e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f923 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ee:	200f      	movs	r0, #15
 80016f0:	f000 f808 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff fda4 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40022000 	.word	0x40022000

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_InitTick+0x54>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f93b 	bl	800199e <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f000 f903 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	; (8001760 <HAL_InitTick+0x5c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000003c 	.word	0x2000003c
 800175c:	20000050 	.word	0x20000050
 8001760:	2000004c 	.word	0x2000004c

08001764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_IncTick+0x1c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_IncTick+0x20>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a03      	ldr	r2, [pc, #12]	; (8001784 <HAL_IncTick+0x20>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	20000050 	.word	0x20000050
 8001784:	20000424 	.word	0x20000424

08001788 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b02      	ldr	r3, [pc, #8]	; (8001798 <HAL_GetTick+0x10>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	20000424 	.word	0x20000424

0800179c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	db0b      	blt.n	800182a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f003 021f 	and.w	r2, r3, #31
 8001818:	4906      	ldr	r1, [pc, #24]	; (8001834 <__NVIC_EnableIRQ+0x34>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	2001      	movs	r0, #1
 8001822:	fa00 f202 	lsl.w	r2, r0, r2
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100

08001838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	db0a      	blt.n	8001862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	490c      	ldr	r1, [pc, #48]	; (8001884 <__NVIC_SetPriority+0x4c>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	440b      	add	r3, r1
 800185c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001860:	e00a      	b.n	8001878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4908      	ldr	r1, [pc, #32]	; (8001888 <__NVIC_SetPriority+0x50>)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	3b04      	subs	r3, #4
 8001870:	0112      	lsls	r2, r2, #4
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	440b      	add	r3, r1
 8001876:	761a      	strb	r2, [r3, #24]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f1c3 0307 	rsb	r3, r3, #7
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	bf28      	it	cs
 80018aa:	2304      	movcs	r3, #4
 80018ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3304      	adds	r3, #4
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d902      	bls.n	80018bc <NVIC_EncodePriority+0x30>
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3b03      	subs	r3, #3
 80018ba:	e000      	b.n	80018be <NVIC_EncodePriority+0x32>
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d4:	f04f 31ff 	mov.w	r1, #4294967295
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43d9      	mvns	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	4313      	orrs	r3, r2
         );
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3724      	adds	r7, #36	; 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f7ff ff90 	bl	8001838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff2d 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800195c:	f7ff ff42 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	f7ff ff90 	bl	800188c <NVIC_EncodePriority>
 800196c:	4602      	mov	r2, r0
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5f 	bl	8001838 <__NVIC_SetPriority>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff35 	bl	8001800 <__NVIC_EnableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffa2 	bl	80018f0 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b08b      	sub	sp, #44	; 0x2c
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019c6:	2300      	movs	r3, #0
 80019c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ca:	e148      	b.n	8001c5e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019cc:	2201      	movs	r2, #1
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 8137 	bne.w	8001c58 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4aa3      	ldr	r2, [pc, #652]	; (8001c7c <HAL_GPIO_Init+0x2c4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d05e      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 80019f4:	4aa1      	ldr	r2, [pc, #644]	; (8001c7c <HAL_GPIO_Init+0x2c4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d875      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 80019fa:	4aa1      	ldr	r2, [pc, #644]	; (8001c80 <HAL_GPIO_Init+0x2c8>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d058      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 8001a00:	4a9f      	ldr	r2, [pc, #636]	; (8001c80 <HAL_GPIO_Init+0x2c8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d86f      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a06:	4a9f      	ldr	r2, [pc, #636]	; (8001c84 <HAL_GPIO_Init+0x2cc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d052      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 8001a0c:	4a9d      	ldr	r2, [pc, #628]	; (8001c84 <HAL_GPIO_Init+0x2cc>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d869      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a12:	4a9d      	ldr	r2, [pc, #628]	; (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d04c      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 8001a18:	4a9b      	ldr	r2, [pc, #620]	; (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d863      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a1e:	4a9b      	ldr	r2, [pc, #620]	; (8001c8c <HAL_GPIO_Init+0x2d4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d046      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 8001a24:	4a99      	ldr	r2, [pc, #612]	; (8001c8c <HAL_GPIO_Init+0x2d4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d85d      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a2a:	2b12      	cmp	r3, #18
 8001a2c:	d82a      	bhi.n	8001a84 <HAL_GPIO_Init+0xcc>
 8001a2e:	2b12      	cmp	r3, #18
 8001a30:	d859      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a32:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <HAL_GPIO_Init+0x80>)
 8001a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a38:	08001ab3 	.word	0x08001ab3
 8001a3c:	08001a8d 	.word	0x08001a8d
 8001a40:	08001a9f 	.word	0x08001a9f
 8001a44:	08001ae1 	.word	0x08001ae1
 8001a48:	08001ae7 	.word	0x08001ae7
 8001a4c:	08001ae7 	.word	0x08001ae7
 8001a50:	08001ae7 	.word	0x08001ae7
 8001a54:	08001ae7 	.word	0x08001ae7
 8001a58:	08001ae7 	.word	0x08001ae7
 8001a5c:	08001ae7 	.word	0x08001ae7
 8001a60:	08001ae7 	.word	0x08001ae7
 8001a64:	08001ae7 	.word	0x08001ae7
 8001a68:	08001ae7 	.word	0x08001ae7
 8001a6c:	08001ae7 	.word	0x08001ae7
 8001a70:	08001ae7 	.word	0x08001ae7
 8001a74:	08001ae7 	.word	0x08001ae7
 8001a78:	08001ae7 	.word	0x08001ae7
 8001a7c:	08001a95 	.word	0x08001a95
 8001a80:	08001aa9 	.word	0x08001aa9
 8001a84:	4a82      	ldr	r2, [pc, #520]	; (8001c90 <HAL_GPIO_Init+0x2d8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a8a:	e02c      	b.n	8001ae6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	623b      	str	r3, [r7, #32]
          break;
 8001a92:	e029      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	623b      	str	r3, [r7, #32]
          break;
 8001a9c:	e024      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	3308      	adds	r3, #8
 8001aa4:	623b      	str	r3, [r7, #32]
          break;
 8001aa6:	e01f      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	330c      	adds	r3, #12
 8001aae:	623b      	str	r3, [r7, #32]
          break;
 8001ab0:	e01a      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aba:	2304      	movs	r3, #4
 8001abc:	623b      	str	r3, [r7, #32]
          break;
 8001abe:	e013      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d105      	bne.n	8001ad4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac8:	2308      	movs	r3, #8
 8001aca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	611a      	str	r2, [r3, #16]
          break;
 8001ad2:	e009      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	615a      	str	r2, [r3, #20]
          break;
 8001ade:	e003      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
          break;
 8001ae4:	e000      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          break;
 8001ae6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2bff      	cmp	r3, #255	; 0xff
 8001aec:	d801      	bhi.n	8001af2 <HAL_GPIO_Init+0x13a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	e001      	b.n	8001af6 <HAL_GPIO_Init+0x13e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3304      	adds	r3, #4
 8001af6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2bff      	cmp	r3, #255	; 0xff
 8001afc:	d802      	bhi.n	8001b04 <HAL_GPIO_Init+0x14c>
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	e002      	b.n	8001b0a <HAL_GPIO_Init+0x152>
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	3b08      	subs	r3, #8
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	210f      	movs	r1, #15
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	6a39      	ldr	r1, [r7, #32]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	431a      	orrs	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8090 	beq.w	8001c58 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b38:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <HAL_GPIO_Init+0x2dc>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a55      	ldr	r2, [pc, #340]	; (8001c94 <HAL_GPIO_Init+0x2dc>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <HAL_GPIO_Init+0x2dc>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b50:	4a51      	ldr	r2, [pc, #324]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	3302      	adds	r3, #2
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	220f      	movs	r2, #15
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a49      	ldr	r2, [pc, #292]	; (8001c9c <HAL_GPIO_Init+0x2e4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d00d      	beq.n	8001b98 <HAL_GPIO_Init+0x1e0>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a48      	ldr	r2, [pc, #288]	; (8001ca0 <HAL_GPIO_Init+0x2e8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d007      	beq.n	8001b94 <HAL_GPIO_Init+0x1dc>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a47      	ldr	r2, [pc, #284]	; (8001ca4 <HAL_GPIO_Init+0x2ec>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d101      	bne.n	8001b90 <HAL_GPIO_Init+0x1d8>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e004      	b.n	8001b9a <HAL_GPIO_Init+0x1e2>
 8001b90:	2303      	movs	r3, #3
 8001b92:	e002      	b.n	8001b9a <HAL_GPIO_Init+0x1e2>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <HAL_GPIO_Init+0x1e2>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9c:	f002 0203 	and.w	r2, r2, #3
 8001ba0:	0092      	lsls	r2, r2, #2
 8001ba2:	4093      	lsls	r3, r2
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001baa:	493b      	ldr	r1, [pc, #236]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bc4:	4b38      	ldr	r3, [pc, #224]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	4937      	ldr	r1, [pc, #220]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bd2:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	4933      	ldr	r1, [pc, #204]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bec:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	492d      	ldr	r1, [pc, #180]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60cb      	str	r3, [r1, #12]
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4929      	ldr	r1, [pc, #164]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4923      	ldr	r1, [pc, #140]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
 8001c20:	e006      	b.n	8001c30 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	491f      	ldr	r1, [pc, #124]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4919      	ldr	r1, [pc, #100]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4915      	ldr	r1, [pc, #84]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f47f aeaf 	bne.w	80019cc <HAL_GPIO_Init+0x14>
  }
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	372c      	adds	r7, #44	; 0x2c
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	10320000 	.word	0x10320000
 8001c80:	10310000 	.word	0x10310000
 8001c84:	10220000 	.word	0x10220000
 8001c88:	10210000 	.word	0x10210000
 8001c8c:	10120000 	.word	0x10120000
 8001c90:	10110000 	.word	0x10110000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	40010800 	.word	0x40010800
 8001ca0:	40010c00 	.word	0x40010c00
 8001ca4:	40011000 	.word	0x40011000
 8001ca8:	40010400 	.word	0x40010400

08001cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	e001      	b.n	8001cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	807b      	strh	r3, [r7, #2]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cea:	787b      	ldrb	r3, [r7, #1]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf0:	887a      	ldrh	r2, [r7, #2]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cf6:	e003      	b.n	8001d00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	041a      	lsls	r2, r3, #16
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	611a      	str	r2, [r3, #16]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d1c:	887a      	ldrh	r2, [r7, #2]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4013      	ands	r3, r2
 8001d22:	041a      	lsls	r2, r3, #16
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43d9      	mvns	r1, r3
 8001d28:	887b      	ldrh	r3, [r7, #2]
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	611a      	str	r2, [r3, #16]
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e26c      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8087 	beq.w	8001e6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d5c:	4b92      	ldr	r3, [pc, #584]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d00c      	beq.n	8001d82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d68:	4b8f      	ldr	r3, [pc, #572]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d112      	bne.n	8001d9a <HAL_RCC_OscConfig+0x5e>
 8001d74:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d80:	d10b      	bne.n	8001d9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d82:	4b89      	ldr	r3, [pc, #548]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d06c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x12c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d168      	bne.n	8001e68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e246      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da2:	d106      	bne.n	8001db2 <HAL_RCC_OscConfig+0x76>
 8001da4:	4b80      	ldr	r3, [pc, #512]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a7f      	ldr	r2, [pc, #508]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	e02e      	b.n	8001e10 <HAL_RCC_OscConfig+0xd4>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x98>
 8001dba:	4b7b      	ldr	r3, [pc, #492]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7a      	ldr	r2, [pc, #488]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b78      	ldr	r3, [pc, #480]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a77      	ldr	r2, [pc, #476]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e01d      	b.n	8001e10 <HAL_RCC_OscConfig+0xd4>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0xbc>
 8001dde:	4b72      	ldr	r3, [pc, #456]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a71      	ldr	r2, [pc, #452]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b6f      	ldr	r3, [pc, #444]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a6e      	ldr	r2, [pc, #440]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0xd4>
 8001df8:	4b6b      	ldr	r3, [pc, #428]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a6a      	ldr	r2, [pc, #424]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b68      	ldr	r3, [pc, #416]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a67      	ldr	r2, [pc, #412]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fcb6 	bl	8001788 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff fcb2 	bl	8001788 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e1fa      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	4b5d      	ldr	r3, [pc, #372]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0xe4>
 8001e3e:	e014      	b.n	8001e6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fca2 	bl	8001788 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff fc9e 	bl	8001788 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	; 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e1e6      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5a:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x10c>
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d063      	beq.n	8001f3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e76:	4b4c      	ldr	r3, [pc, #304]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00b      	beq.n	8001e9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e82:	4b49      	ldr	r3, [pc, #292]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d11c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x18c>
 8001e8e:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d116      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x176>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e1ba      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4939      	ldr	r1, [pc, #228]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec6:	e03a      	b.n	8001f3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d020      	beq.n	8001f12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <HAL_RCC_OscConfig+0x270>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fc57 	bl	8001788 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ede:	f7ff fc53 	bl	8001788 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e19b      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efc:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4927      	ldr	r1, [pc, #156]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
 8001f10:	e015      	b.n	8001f3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_RCC_OscConfig+0x270>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fc36 	bl	8001788 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f20:	f7ff fc32 	bl	8001788 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e17a      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d03a      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d019      	beq.n	8001f86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <HAL_RCC_OscConfig+0x274>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f58:	f7ff fc16 	bl	8001788 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f60:	f7ff fc12 	bl	8001788 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e15a      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f000 fa9a 	bl	80024b8 <RCC_Delay>
 8001f84:	e01c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_RCC_OscConfig+0x274>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8c:	f7ff fbfc 	bl	8001788 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f92:	e00f      	b.n	8001fb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f94:	f7ff fbf8 	bl	8001788 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d908      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e140      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	42420000 	.word	0x42420000
 8001fb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb4:	4b9e      	ldr	r3, [pc, #632]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e9      	bne.n	8001f94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80a6 	beq.w	800211a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd2:	4b97      	ldr	r3, [pc, #604]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10d      	bne.n	8001ffa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4b94      	ldr	r3, [pc, #592]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4a93      	ldr	r2, [pc, #588]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	61d3      	str	r3, [r2, #28]
 8001fea:	4b91      	ldr	r3, [pc, #580]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	4b8e      	ldr	r3, [pc, #568]	; (8002234 <HAL_RCC_OscConfig+0x4f8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d118      	bne.n	8002038 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002006:	4b8b      	ldr	r3, [pc, #556]	; (8002234 <HAL_RCC_OscConfig+0x4f8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a8a      	ldr	r2, [pc, #552]	; (8002234 <HAL_RCC_OscConfig+0x4f8>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002012:	f7ff fbb9 	bl	8001788 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201a:	f7ff fbb5 	bl	8001788 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b64      	cmp	r3, #100	; 0x64
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e0fd      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	4b81      	ldr	r3, [pc, #516]	; (8002234 <HAL_RCC_OscConfig+0x4f8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x312>
 8002040:	4b7b      	ldr	r3, [pc, #492]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4a7a      	ldr	r2, [pc, #488]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6213      	str	r3, [r2, #32]
 800204c:	e02d      	b.n	80020aa <HAL_RCC_OscConfig+0x36e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x334>
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4a75      	ldr	r2, [pc, #468]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	6213      	str	r3, [r2, #32]
 8002062:	4b73      	ldr	r3, [pc, #460]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a72      	ldr	r2, [pc, #456]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	f023 0304 	bic.w	r3, r3, #4
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	e01c      	b.n	80020aa <HAL_RCC_OscConfig+0x36e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b05      	cmp	r3, #5
 8002076:	d10c      	bne.n	8002092 <HAL_RCC_OscConfig+0x356>
 8002078:	4b6d      	ldr	r3, [pc, #436]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4a6c      	ldr	r2, [pc, #432]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 800207e:	f043 0304 	orr.w	r3, r3, #4
 8002082:	6213      	str	r3, [r2, #32]
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a69      	ldr	r2, [pc, #420]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6213      	str	r3, [r2, #32]
 8002090:	e00b      	b.n	80020aa <HAL_RCC_OscConfig+0x36e>
 8002092:	4b67      	ldr	r3, [pc, #412]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4a66      	ldr	r2, [pc, #408]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	6213      	str	r3, [r2, #32]
 800209e:	4b64      	ldr	r3, [pc, #400]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a63      	ldr	r2, [pc, #396]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d015      	beq.n	80020de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b2:	f7ff fb69 	bl	8001788 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7ff fb65 	bl	8001788 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0ab      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d0:	4b57      	ldr	r3, [pc, #348]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0ee      	beq.n	80020ba <HAL_RCC_OscConfig+0x37e>
 80020dc:	e014      	b.n	8002108 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020de:	f7ff fb53 	bl	8001788 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7ff fb4f 	bl	8001788 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e095      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fc:	4b4c      	ldr	r3, [pc, #304]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1ee      	bne.n	80020e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002108:	7dfb      	ldrb	r3, [r7, #23]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d105      	bne.n	800211a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210e:	4b48      	ldr	r3, [pc, #288]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	4a47      	ldr	r2, [pc, #284]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002118:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8081 	beq.w	8002226 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002124:	4b42      	ldr	r3, [pc, #264]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b08      	cmp	r3, #8
 800212e:	d061      	beq.n	80021f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d146      	bne.n	80021c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002138:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_RCC_OscConfig+0x4fc>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7ff fb23 	bl	8001788 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002146:	f7ff fb1f 	bl	8001788 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e067      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002158:	4b35      	ldr	r3, [pc, #212]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f0      	bne.n	8002146 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216c:	d108      	bne.n	8002180 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800216e:	4b30      	ldr	r3, [pc, #192]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	492d      	ldr	r1, [pc, #180]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a19      	ldr	r1, [r3, #32]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	430b      	orrs	r3, r1
 8002192:	4927      	ldr	r1, [pc, #156]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002198:	4b27      	ldr	r3, [pc, #156]	; (8002238 <HAL_RCC_OscConfig+0x4fc>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7ff faf3 	bl	8001788 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a6:	f7ff faef 	bl	8001788 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e037      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x46a>
 80021c4:	e02f      	b.n	8002226 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c6:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <HAL_RCC_OscConfig+0x4fc>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7ff fadc 	bl	8001788 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7ff fad8 	bl	8001788 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e020      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e6:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x498>
 80021f2:	e018      	b.n	8002226 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e013      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	429a      	cmp	r2, r3
 8002212:	d106      	bne.n	8002222 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d001      	beq.n	8002226 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
 8002238:	42420060 	.word	0x42420060

0800223c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0d0      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002250:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d910      	bls.n	8002280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b67      	ldr	r3, [pc, #412]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 0207 	bic.w	r2, r3, #7
 8002266:	4965      	ldr	r1, [pc, #404]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b63      	ldr	r3, [pc, #396]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0b8      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002298:	4b59      	ldr	r3, [pc, #356]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a58      	ldr	r2, [pc, #352]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b0:	4b53      	ldr	r3, [pc, #332]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4a52      	ldr	r2, [pc, #328]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	4b50      	ldr	r3, [pc, #320]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	494d      	ldr	r1, [pc, #308]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d040      	beq.n	800235c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b47      	ldr	r3, [pc, #284]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d115      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e07f      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	4b41      	ldr	r3, [pc, #260]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e073      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230a:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e06b      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b39      	ldr	r3, [pc, #228]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4936      	ldr	r1, [pc, #216]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800232c:	f7ff fa2c 	bl	8001788 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7ff fa28 	bl	8001788 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e053      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800235c:	4b27      	ldr	r3, [pc, #156]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d210      	bcs.n	800238c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 0207 	bic.w	r2, r3, #7
 8002372:	4922      	ldr	r1, [pc, #136]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e032      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4916      	ldr	r1, [pc, #88]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d009      	beq.n	80023ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	490e      	ldr	r1, [pc, #56]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ca:	f000 f821 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	490a      	ldr	r1, [pc, #40]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023dc:	5ccb      	ldrb	r3, [r1, r3]
 80023de:	fa22 f303 	lsr.w	r3, r2, r3
 80023e2:	4a09      	ldr	r2, [pc, #36]	; (8002408 <HAL_RCC_ClockConfig+0x1cc>)
 80023e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_RCC_ClockConfig+0x1d0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff f98a 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40022000 	.word	0x40022000
 8002400:	40021000 	.word	0x40021000
 8002404:	08002d1c 	.word	0x08002d1c
 8002408:	2000003c 	.word	0x2000003c
 800240c:	2000004c 	.word	0x2000004c

08002410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b04      	cmp	r3, #4
 8002438:	d002      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x30>
 800243a:	2b08      	cmp	r3, #8
 800243c:	d003      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0x36>
 800243e:	e027      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002442:	613b      	str	r3, [r7, #16]
      break;
 8002444:	e027      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	0c9b      	lsrs	r3, r3, #18
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	4a17      	ldr	r2, [pc, #92]	; (80024ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002450:	5cd3      	ldrb	r3, [r2, r3]
 8002452:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d010      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	0c5b      	lsrs	r3, r3, #17
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	4a11      	ldr	r2, [pc, #68]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a0d      	ldr	r2, [pc, #52]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002472:	fb02 f203 	mul.w	r2, r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e004      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a0c      	ldr	r2, [pc, #48]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002484:	fb02 f303 	mul.w	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	613b      	str	r3, [r7, #16]
      break;
 800248e:	e002      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002492:	613b      	str	r3, [r7, #16]
      break;
 8002494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002496:	693b      	ldr	r3, [r7, #16]
}
 8002498:	4618      	mov	r0, r3
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	007a1200 	.word	0x007a1200
 80024ac:	08002d30 	.word	0x08002d30
 80024b0:	08002d40 	.word	0x08002d40
 80024b4:	003d0900 	.word	0x003d0900

080024b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <RCC_Delay+0x34>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <RCC_Delay+0x38>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	0a5b      	lsrs	r3, r3, #9
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024d4:	bf00      	nop
  }
  while (Delay --);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1e5a      	subs	r2, r3, #1
 80024da:	60fa      	str	r2, [r7, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f9      	bne.n	80024d4 <RCC_Delay+0x1c>
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	2000003c 	.word	0x2000003c
 80024f0:	10624dd3 	.word	0x10624dd3

080024f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e041      	b.n	800258a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe fec2 	bl	80012a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3304      	adds	r3, #4
 8002530:	4619      	mov	r1, r3
 8002532:	4610      	mov	r0, r2
 8002534:	f000 fa56 	bl	80029e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d001      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e035      	b.n	8002618 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a16      	ldr	r2, [pc, #88]	; (8002624 <HAL_TIM_Base_Start_IT+0x90>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_TIM_Base_Start_IT+0x4e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d6:	d004      	beq.n	80025e2 <HAL_TIM_Base_Start_IT+0x4e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a12      	ldr	r2, [pc, #72]	; (8002628 <HAL_TIM_Base_Start_IT+0x94>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d111      	bne.n	8002606 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b06      	cmp	r3, #6
 80025f2:	d010      	beq.n	8002616 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002604:	e007      	b.n	8002616 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40000400 	.word	0x40000400

0800262c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d020      	beq.n	8002690 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01b      	beq.n	8002690 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0202 	mvn.w	r2, #2
 8002660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f998 	bl	80029ac <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f98b 	bl	800299a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f99a 	bl	80029be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	d020      	beq.n	80026dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d01b      	beq.n	80026dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0204 	mvn.w	r2, #4
 80026ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2202      	movs	r2, #2
 80026b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f972 	bl	80029ac <HAL_TIM_IC_CaptureCallback>
 80026c8:	e005      	b.n	80026d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f965 	bl	800299a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f974 	bl	80029be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d020      	beq.n	8002728 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01b      	beq.n	8002728 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0208 	mvn.w	r2, #8
 80026f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2204      	movs	r2, #4
 80026fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f94c 	bl	80029ac <HAL_TIM_IC_CaptureCallback>
 8002714:	e005      	b.n	8002722 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f93f 	bl	800299a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f94e 	bl	80029be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	d020      	beq.n	8002774 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01b      	beq.n	8002774 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0210 	mvn.w	r2, #16
 8002744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2208      	movs	r2, #8
 800274a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f926 	bl	80029ac <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f919 	bl	800299a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f928 	bl	80029be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00c      	beq.n	8002798 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0201 	mvn.w	r2, #1
 8002790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fe fb98 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fa6f 	bl	8002c9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00c      	beq.n	80027e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8f8 	bl	80029d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00c      	beq.n	8002804 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d007      	beq.n	8002804 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0220 	mvn.w	r2, #32
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fa42 	bl	8002c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_TIM_ConfigClockSource+0x1c>
 8002824:	2302      	movs	r3, #2
 8002826:	e0b4      	b.n	8002992 <HAL_TIM_ConfigClockSource+0x186>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800284e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002860:	d03e      	beq.n	80028e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002866:	f200 8087 	bhi.w	8002978 <HAL_TIM_ConfigClockSource+0x16c>
 800286a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286e:	f000 8086 	beq.w	800297e <HAL_TIM_ConfigClockSource+0x172>
 8002872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002876:	d87f      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x16c>
 8002878:	2b70      	cmp	r3, #112	; 0x70
 800287a:	d01a      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0xa6>
 800287c:	2b70      	cmp	r3, #112	; 0x70
 800287e:	d87b      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x16c>
 8002880:	2b60      	cmp	r3, #96	; 0x60
 8002882:	d050      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x11a>
 8002884:	2b60      	cmp	r3, #96	; 0x60
 8002886:	d877      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x16c>
 8002888:	2b50      	cmp	r3, #80	; 0x50
 800288a:	d03c      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0xfa>
 800288c:	2b50      	cmp	r3, #80	; 0x50
 800288e:	d873      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x16c>
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d058      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x13a>
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	d86f      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x16c>
 8002898:	2b30      	cmp	r3, #48	; 0x30
 800289a:	d064      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x15a>
 800289c:	2b30      	cmp	r3, #48	; 0x30
 800289e:	d86b      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x16c>
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d060      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x15a>
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d867      	bhi.n	8002978 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d05c      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x15a>
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d05a      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x15a>
 80028b0:	e062      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f000 f96a 	bl	8002b9a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	609a      	str	r2, [r3, #8]
      break;
 80028de:	e04f      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f000 f953 	bl	8002b9a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002902:	609a      	str	r2, [r3, #8]
      break;
 8002904:	e03c      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	461a      	mov	r2, r3
 8002914:	f000 f8ca 	bl	8002aac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2150      	movs	r1, #80	; 0x50
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f921 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 8002924:	e02c      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	461a      	mov	r2, r3
 8002934:	f000 f8e8 	bl	8002b08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2160      	movs	r1, #96	; 0x60
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f911 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 8002944:	e01c      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	461a      	mov	r2, r3
 8002954:	f000 f8aa 	bl	8002aac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2140      	movs	r1, #64	; 0x40
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f901 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 8002964:	e00c      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	4610      	mov	r0, r2
 8002972:	f000 f8f8 	bl	8002b66 <TIM_ITRx_SetConfig>
      break;
 8002976:	e003      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
      break;
 800297c:	e000      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800297e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr

080029be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
	...

080029e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a2b      	ldr	r2, [pc, #172]	; (8002aa4 <TIM_Base_SetConfig+0xc0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d007      	beq.n	8002a0c <TIM_Base_SetConfig+0x28>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a02:	d003      	beq.n	8002a0c <TIM_Base_SetConfig+0x28>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a28      	ldr	r2, [pc, #160]	; (8002aa8 <TIM_Base_SetConfig+0xc4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d108      	bne.n	8002a1e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a20      	ldr	r2, [pc, #128]	; (8002aa4 <TIM_Base_SetConfig+0xc0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <TIM_Base_SetConfig+0x52>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d003      	beq.n	8002a36 <TIM_Base_SetConfig+0x52>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <TIM_Base_SetConfig+0xc4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d108      	bne.n	8002a48 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a0d      	ldr	r2, [pc, #52]	; (8002aa4 <TIM_Base_SetConfig+0xc0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d103      	bne.n	8002a7c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f023 0201 	bic.w	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	611a      	str	r2, [r3, #16]
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400

08002aac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f023 0201 	bic.w	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f023 030a 	bic.w	r3, r3, #10
 8002ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	621a      	str	r2, [r3, #32]
}
 8002afe:	bf00      	nop
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	f023 0210 	bic.w	r2, r3, #16
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	031b      	lsls	r3, r3, #12
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	621a      	str	r2, [r3, #32]
}
 8002b5c:	bf00      	nop
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f043 0307 	orr.w	r3, r3, #7
 8002b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b087      	sub	sp, #28
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	021a      	lsls	r2, r3, #8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	609a      	str	r2, [r3, #8]
}
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e041      	b.n	8002c74 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d009      	beq.n	8002c48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d004      	beq.n	8002c48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a10      	ldr	r2, [pc, #64]	; (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d10c      	bne.n	8002c62 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40000400 	.word	0x40000400

08002c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <__libc_init_array>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	2600      	movs	r6, #0
 8002cb0:	4d0c      	ldr	r5, [pc, #48]	; (8002ce4 <__libc_init_array+0x38>)
 8002cb2:	4c0d      	ldr	r4, [pc, #52]	; (8002ce8 <__libc_init_array+0x3c>)
 8002cb4:	1b64      	subs	r4, r4, r5
 8002cb6:	10a4      	asrs	r4, r4, #2
 8002cb8:	42a6      	cmp	r6, r4
 8002cba:	d109      	bne.n	8002cd0 <__libc_init_array+0x24>
 8002cbc:	f000 f822 	bl	8002d04 <_init>
 8002cc0:	2600      	movs	r6, #0
 8002cc2:	4d0a      	ldr	r5, [pc, #40]	; (8002cec <__libc_init_array+0x40>)
 8002cc4:	4c0a      	ldr	r4, [pc, #40]	; (8002cf0 <__libc_init_array+0x44>)
 8002cc6:	1b64      	subs	r4, r4, r5
 8002cc8:	10a4      	asrs	r4, r4, #2
 8002cca:	42a6      	cmp	r6, r4
 8002ccc:	d105      	bne.n	8002cda <__libc_init_array+0x2e>
 8002cce:	bd70      	pop	{r4, r5, r6, pc}
 8002cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd4:	4798      	blx	r3
 8002cd6:	3601      	adds	r6, #1
 8002cd8:	e7ee      	b.n	8002cb8 <__libc_init_array+0xc>
 8002cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cde:	4798      	blx	r3
 8002ce0:	3601      	adds	r6, #1
 8002ce2:	e7f2      	b.n	8002cca <__libc_init_array+0x1e>
 8002ce4:	08002d44 	.word	0x08002d44
 8002ce8:	08002d44 	.word	0x08002d44
 8002cec:	08002d44 	.word	0x08002d44
 8002cf0:	08002d48 	.word	0x08002d48

08002cf4 <memset>:
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4402      	add	r2, r0
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d100      	bne.n	8002cfe <memset+0xa>
 8002cfc:	4770      	bx	lr
 8002cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002d02:	e7f9      	b.n	8002cf8 <memset+0x4>

08002d04 <_init>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	bf00      	nop
 8002d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0a:	bc08      	pop	{r3}
 8002d0c:	469e      	mov	lr, r3
 8002d0e:	4770      	bx	lr

08002d10 <_fini>:
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	bf00      	nop
 8002d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d16:	bc08      	pop	{r3}
 8002d18:	469e      	mov	lr, r3
 8002d1a:	4770      	bx	lr
